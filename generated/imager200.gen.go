// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for PipelineStatus.
const (
	Finished   PipelineStatus = "finished"
	InProgress PipelineStatus = "in progress"
)

// Defines values for BlendRequestMode.
const (
	BlendRequestModeRtl BlendRequestMode = "rtl"
	BlendRequestModeRts BlendRequestMode = "rts"
)

// Defines values for BlendRequestTargetFormat.
const (
	BlendRequestTargetFormatBmp  BlendRequestTargetFormat = "bmp"
	BlendRequestTargetFormatJpeg BlendRequestTargetFormat = "jpeg"
	BlendRequestTargetFormatPng  BlendRequestTargetFormat = "png"
)

// Defines values for ConcatRequestConcatMode.
const (
	ConcatRequestConcatModeNone ConcatRequestConcatMode = "none"
	ConcatRequestConcatModeRtl  ConcatRequestConcatMode = "rtl"
	ConcatRequestConcatModeRts  ConcatRequestConcatMode = "rts"
)

// Defines values for ConcatRequestDirection.
const (
	Hor ConcatRequestDirection = "hor"
	Ver ConcatRequestDirection = "ver"
)

// Defines values for ConcatRequestTargetFormat.
const (
	ConcatRequestTargetFormatBmp  ConcatRequestTargetFormat = "bmp"
	ConcatRequestTargetFormatGif  ConcatRequestTargetFormat = "gif"
	ConcatRequestTargetFormatJpeg ConcatRequestTargetFormat = "jpeg"
	ConcatRequestTargetFormatPng  ConcatRequestTargetFormat = "png"
)

// Defines values for ConvertAsyncGetParamsTargetFormat.
const (
	ConvertAsyncGetParamsTargetFormatBmp  ConvertAsyncGetParamsTargetFormat = "bmp"
	ConvertAsyncGetParamsTargetFormatGif  ConvertAsyncGetParamsTargetFormat = "gif"
	ConvertAsyncGetParamsTargetFormatIco  ConvertAsyncGetParamsTargetFormat = "ico"
	ConvertAsyncGetParamsTargetFormatJpeg ConvertAsyncGetParamsTargetFormat = "jpeg"
	ConvertAsyncGetParamsTargetFormatPng  ConvertAsyncGetParamsTargetFormat = "png"
)

// Defines values for ConvertAsyncPostParamsTargetFormat.
const (
	ConvertAsyncPostParamsTargetFormatBmp  ConvertAsyncPostParamsTargetFormat = "bmp"
	ConvertAsyncPostParamsTargetFormatGif  ConvertAsyncPostParamsTargetFormat = "gif"
	ConvertAsyncPostParamsTargetFormatIco  ConvertAsyncPostParamsTargetFormat = "ico"
	ConvertAsyncPostParamsTargetFormatJpeg ConvertAsyncPostParamsTargetFormat = "jpeg"
	ConvertAsyncPostParamsTargetFormatPng  ConvertAsyncPostParamsTargetFormat = "png"
)

// Defines values for ConvertSyncGetParamsTargetFormat.
const (
	ConvertSyncGetParamsTargetFormatBmp  ConvertSyncGetParamsTargetFormat = "bmp"
	ConvertSyncGetParamsTargetFormatGif  ConvertSyncGetParamsTargetFormat = "gif"
	ConvertSyncGetParamsTargetFormatIco  ConvertSyncGetParamsTargetFormat = "ico"
	ConvertSyncGetParamsTargetFormatJpeg ConvertSyncGetParamsTargetFormat = "jpeg"
	ConvertSyncGetParamsTargetFormatPng  ConvertSyncGetParamsTargetFormat = "png"
)

// Defines values for ConvertSyncPostParamsTargetFormat.
const (
	ConvertSyncPostParamsTargetFormatBmp  ConvertSyncPostParamsTargetFormat = "bmp"
	ConvertSyncPostParamsTargetFormatGif  ConvertSyncPostParamsTargetFormat = "gif"
	ConvertSyncPostParamsTargetFormatIco  ConvertSyncPostParamsTargetFormat = "ico"
	ConvertSyncPostParamsTargetFormatJpeg ConvertSyncPostParamsTargetFormat = "jpeg"
	ConvertSyncPostParamsTargetFormatPng  ConvertSyncPostParamsTargetFormat = "png"
)

// Defines values for ResizeAsyncGetParamsResamplingAlgorithm.
const (
	ResizeAsyncGetParamsResamplingAlgorithmBox             ResizeAsyncGetParamsResamplingAlgorithm = "box"
	ResizeAsyncGetParamsResamplingAlgorithmCatmullRom      ResizeAsyncGetParamsResamplingAlgorithm = "catmull_rom"
	ResizeAsyncGetParamsResamplingAlgorithmLanczos         ResizeAsyncGetParamsResamplingAlgorithm = "lanczos"
	ResizeAsyncGetParamsResamplingAlgorithmLinear          ResizeAsyncGetParamsResamplingAlgorithm = "linear"
	ResizeAsyncGetParamsResamplingAlgorithmNearestNeighbor ResizeAsyncGetParamsResamplingAlgorithm = "nearest_neighbor"
)

// Defines values for ResizeAsyncPostParamsResamplingAlgorithm.
const (
	ResizeAsyncPostParamsResamplingAlgorithmBox             ResizeAsyncPostParamsResamplingAlgorithm = "box"
	ResizeAsyncPostParamsResamplingAlgorithmCatmullRom      ResizeAsyncPostParamsResamplingAlgorithm = "catmull_rom"
	ResizeAsyncPostParamsResamplingAlgorithmLanczos         ResizeAsyncPostParamsResamplingAlgorithm = "lanczos"
	ResizeAsyncPostParamsResamplingAlgorithmLinear          ResizeAsyncPostParamsResamplingAlgorithm = "linear"
	ResizeAsyncPostParamsResamplingAlgorithmNearestNeighbor ResizeAsyncPostParamsResamplingAlgorithm = "nearest_neighbor"
)

// Defines values for ResizeSyncGetParamsResamplingAlgorithm.
const (
	ResizeSyncGetParamsResamplingAlgorithmBox             ResizeSyncGetParamsResamplingAlgorithm = "box"
	ResizeSyncGetParamsResamplingAlgorithmCatmullRom      ResizeSyncGetParamsResamplingAlgorithm = "catmull_rom"
	ResizeSyncGetParamsResamplingAlgorithmLanczos         ResizeSyncGetParamsResamplingAlgorithm = "lanczos"
	ResizeSyncGetParamsResamplingAlgorithmLinear          ResizeSyncGetParamsResamplingAlgorithm = "linear"
	ResizeSyncGetParamsResamplingAlgorithmNearestNeighbor ResizeSyncGetParamsResamplingAlgorithm = "nearest_neighbor"
)

// Defines values for ResizeSyncPostParamsResamplingAlgorithm.
const (
	ResizeSyncPostParamsResamplingAlgorithmBox             ResizeSyncPostParamsResamplingAlgorithm = "box"
	ResizeSyncPostParamsResamplingAlgorithmCatmullRom      ResizeSyncPostParamsResamplingAlgorithm = "catmull_rom"
	ResizeSyncPostParamsResamplingAlgorithmLanczos         ResizeSyncPostParamsResamplingAlgorithm = "lanczos"
	ResizeSyncPostParamsResamplingAlgorithmLinear          ResizeSyncPostParamsResamplingAlgorithm = "linear"
	ResizeSyncPostParamsResamplingAlgorithmNearestNeighbor ResizeSyncPostParamsResamplingAlgorithm = "nearest_neighbor"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details   *string `json:"details,omitempty"`
	Message   *string `json:"message,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
}

// ImageMetadata defines model for ImageMetadata.
type ImageMetadata struct {
	BackgroundColor  *string  `json:"backgroundColor,omitempty"`
	BorderColor      *string  `json:"borderColor,omitempty"`
	Class            *string  `json:"class,omitempty"`
	Colorspace       *string  `json:"colorspace,omitempty"`
	Compose          *string  `json:"compose,omitempty"`
	Compression      *string  `json:"compression,omitempty"`
	DepthInBits      *float32 `json:"depthInBits,omitempty"`
	Dispose          *string  `json:"dispose,omitempty"`
	Endianness       *string  `json:"endianness,omitempty"`
	Format           *string  `json:"format,omitempty"`
	Gamma            *float32 `json:"gamma,omitempty"`
	Geometry         *string  `json:"geometry,omitempty"`
	Intensity        *string  `json:"intensity,omitempty"`
	Interlace        *string  `json:"interlace,omitempty"`
	Iterations       *float32 `json:"iterations,omitempty"`
	MatteColor       *string  `json:"matteColor,omitempty"`
	NumberOfPixels   *float32 `json:"numberOfPixels,omitempty"`
	Orientation      *string  `json:"orientation,omitempty"`
	PageGeometry     *string  `json:"pageGeometry,omitempty"`
	RenderingIntent  *string  `json:"renderingIntent,omitempty"`
	SizeInBytes      *float32 `json:"sizeInBytes,omitempty"`
	Tainted          *string  `json:"tainted,omitempty"`
	TransparentColor *string  `json:"transparentColor,omitempty"`
	Type             *string  `json:"type,omitempty"`
	Units            *string  `json:"units,omitempty"`
}

// InfoResponse defines model for InfoResponse.
type InfoResponse struct {
	Info *string `json:"info,omitempty"`
}

// PipelineExecutionResult defines model for PipelineExecutionResult.
type PipelineExecutionResult struct {
	Created         *int            `json:"created,omitempty"`
	FailureStep     *int            `json:"failure_step,omitempty"`
	Name            *string         `json:"name,omitempty"`
	SizeInMegabytes *float32        `json:"size_in_megabytes,omitempty"`
	Status          *PipelineStatus `json:"status,omitempty"`
	Success         *bool           `json:"success,omitempty"`
}

// PipelineStatus defines model for PipelineStatus.
type PipelineStatus string

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// ExecutionId this is important for the tracking of the execution of the pipeline, it can be used with the /pipeline/{execution_id}/status
	ExecutionId *string `json:"executionId,omitempty"`
	Message     *string `json:"message,omitempty"`
}

// BlendRequest defines model for blend.Request.
type BlendRequest struct {
	Alpha        *float32                  `json:"alpha,omitempty"`
	Image1       string                    `json:"image1"`
	Image2       string                    `json:"image2"`
	Mode         *BlendRequestMode         `json:"mode,omitempty"`
	TargetFormat *BlendRequestTargetFormat `json:"targetFormat,omitempty"`
}

// BlendRequestMode defines model for BlendRequest.Mode.
type BlendRequestMode string

// BlendRequestTargetFormat defines model for BlendRequest.TargetFormat.
type BlendRequestTargetFormat string

// ConcatRequest defines model for concat.Request.
type ConcatRequest struct {
	// ConcatMode Defines whether the result image will be resized to the smaller one or the larger one in case both images have different dimensions. It has not effect if images have the same dimensions.
	ConcatMode *ConcatRequestConcatMode `json:"concatMode,omitempty"`

	// Direction This parameter defines how the images will be concatenated. horizontal means that the images will concatenated one beside the other from left to right. vertical means that images will be concatenated one on the top of the other
	Direction    *ConcatRequestDirection    `json:"direction,omitempty"`
	Image1       *string                    `json:"image1,omitempty"`
	Image2       *string                    `json:"image2,omitempty"`
	TargetFormat *ConcatRequestTargetFormat `json:"targetFormat,omitempty"`
}

// ConcatRequestConcatMode Defines whether the result image will be resized to the smaller one or the larger one in case both images have different dimensions. It has not effect if images have the same dimensions.
type ConcatRequestConcatMode string

// ConcatRequestDirection This parameter defines how the images will be concatenated. horizontal means that the images will concatenated one beside the other from left to right. vertical means that images will be concatenated one on the top of the other
type ConcatRequestDirection string

// ConcatRequestTargetFormat defines model for ConcatRequest.TargetFormat.
type ConcatRequestTargetFormat string

// BlurAsyncGetParams defines parameters for BlurAsyncGet.
type BlurAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`

	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`
}

// BlurAsyncPostParams defines parameters for BlurAsyncPost.
type BlurAsyncPostParams struct {
	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`
}

// BlurSyncGetParams defines parameters for BlurSyncGet.
type BlurSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`

	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`
}

// BlurSyncPostParams defines parameters for BlurSyncPost.
type BlurSyncPostParams struct {
	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`
}

// BlurhashAsyncGetParams defines parameters for BlurhashAsyncGet.
type BlurhashAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`
}

// BlurhashSyncGetParams defines parameters for BlurhashSyncGet.
type BlurhashSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`
}

// BlurpartialAsyncGetParams defines parameters for BlurpartialAsyncGet.
type BlurpartialAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`

	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`

	// X0 defines the x coordinate of the first point of the rectangle to blur
	X0 int `form:"x0" json:"x0"`

	// X1 defines the x coordinate of the second point of the rectangle to blur
	X1 int `form:"x1" json:"x1"`

	// Y0 defines the y coordinate of the first point of the rectangle to blur
	Y0 int `form:"y0" json:"y0"`

	// Y1 defines the y coordinate of the second point of the rectangle to blur.
	Y1 int `form:"y1" json:"y1"`
}

// BlurpartialAsyncPostParams defines parameters for BlurpartialAsyncPost.
type BlurpartialAsyncPostParams struct {
	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`

	// X0 defines the x coordinate of the first point of the rectangle to blur
	X0 int `form:"x0" json:"x0"`

	// X1 defines the x coordinate of the second point of the rectangle to blur
	X1 int `form:"x1" json:"x1"`

	// Y0 defines the y coordinate of the first point of the rectangle to blur
	Y0 int `form:"y0" json:"y0"`

	// Y1 defines the y coordinate of the second point of the rectangle to blur.
	Y1 int `form:"y1" json:"y1"`
}

// BlurpartialSyncGetParams defines parameters for BlurpartialSyncGet.
type BlurpartialSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`

	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`

	// X0 defines the x coordinate of the first point of the rectangle to blur
	X0 int `form:"x0" json:"x0"`

	// X1 defines the x coordinate of the second point of the rectangle to blur
	X1 int `form:"x1" json:"x1"`

	// Y0 defines the y coordinate of the first point of the rectangle to blur
	Y0 int `form:"y0" json:"y0"`

	// Y1 defines the y coordinate of the second point of the rectangle to blur.
	Y1 int `form:"y1" json:"y1"`
}

// BlurpartialSyncPostParams defines parameters for BlurpartialSyncPost.
type BlurpartialSyncPostParams struct {
	// Sigma controls the strength of the blur
	Sigma *float32 `form:"sigma,omitempty" json:"sigma,omitempty"`

	// X0 defines the x coordinate of the first point of the rectangle to blur
	X0 int `form:"x0" json:"x0"`

	// X1 defines the x coordinate of the second point of the rectangle to blur
	X1 int `form:"x1" json:"x1"`

	// Y0 defines the y coordinate of the first point of the rectangle to blur
	Y0 int `form:"y0" json:"y0"`

	// Y1 defines the y coordinate of the second point of the rectangle to blur.
	Y1 int `form:"y1" json:"y1"`
}

// BrightnessAsyncGetParams defines parameters for BrightnessAsyncGet.
type BrightnessAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Percentage controls the brightness level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// BrightnessAsyncPostParams defines parameters for BrightnessAsyncPost.
type BrightnessAsyncPostParams struct {
	// Percentage controls the brightness level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// BrightnessSyncGetParams defines parameters for BrightnessSyncGet.
type BrightnessSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Percentage controls the brightness level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// BrightnessSyncPostParams defines parameters for BrightnessSyncPost.
type BrightnessSyncPostParams struct {
	// Percentage controls the brightness level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// CompressAsyncGetParams defines parameters for CompressAsyncGet.
type CompressAsyncGetParams struct {
	// Url image url, supported formats jpeg,png
	Url string `form:"url" json:"url"`

	// JpegQuality defines the jpeg quality level (the higher is the value, the better quality of the image). Only applied if the image is of type jpeg. (uses MozJPEG behind the curtains)
	JpegQuality *int `form:"jpegQuality,omitempty" json:"jpegQuality,omitempty"`

	// PngOptimizationLevel defines the png optimization level (higher value means a smaller size and longer compression time). Only applied if image is of type png.
	PngOptimizationLevel *int `form:"pngOptimizationLevel,omitempty" json:"pngOptimizationLevel,omitempty"`

	// ProgressiveJpeg It toggles the generation of a progressive JPEG. A "false" value generates a baseline JPEG
	ProgressiveJpeg *bool `form:"progressiveJpeg,omitempty" json:"progressiveJpeg,omitempty"`
}

// CompressAsyncPostParams defines parameters for CompressAsyncPost.
type CompressAsyncPostParams struct {
	// JpegQuality defines the jpeg quality level (the higher is the value, the better quality of the image). Only applied if the image is of type jpeg. (uses MozJPEG behind the curtains)
	JpegQuality *int `form:"jpegQuality,omitempty" json:"jpegQuality,omitempty"`

	// PngOptimizationLevel defines the png optimization level (higher value means a smaller size and longer compression time). Only applied if image is of type png.
	PngOptimizationLevel *int `form:"pngOptimizationLevel,omitempty" json:"pngOptimizationLevel,omitempty"`

	// ProgressiveJpeg It toggles the generation of a progressive JPEG. A "false" value generates a baseline JPEG
	ProgressiveJpeg *bool `form:"progressiveJpeg,omitempty" json:"progressiveJpeg,omitempty"`
}

// CompressSyncGetParams defines parameters for CompressSyncGet.
type CompressSyncGetParams struct {
	// Url image url, supported formats jpeg,png
	Url string `form:"url" json:"url"`

	// JpegQuality defines the jpeg quality level (the higher is the value, the better quality of the image). Only applied if the image is of type jpeg. (uses MozJPEG behind the curtains)
	JpegQuality *int `form:"jpegQuality,omitempty" json:"jpegQuality,omitempty"`

	// PngOptimizationLevel defines the png optimization level (higher value means a smaller size and longer compression time). Only applied if image is of type png.
	PngOptimizationLevel *int `form:"pngOptimizationLevel,omitempty" json:"pngOptimizationLevel,omitempty"`

	// ProgressiveJpeg It toggles the generation of a progressive JPEG. A "false" value generates a baseline JPEG
	ProgressiveJpeg *bool `form:"progressiveJpeg,omitempty" json:"progressiveJpeg,omitempty"`
}

// CompressSyncPostParams defines parameters for CompressSyncPost.
type CompressSyncPostParams struct {
	// JpegQuality defines the jpeg quality level (the higher is the value, the better quality of the image). Only applied if the image is of type jpeg. (uses MozJPEG behind the curtains)
	JpegQuality *int `form:"jpegQuality,omitempty" json:"jpegQuality,omitempty"`

	// PngOptimizationLevel defines the png optimization level (higher value means a smaller size and longer compression time). Only applied if image is of type png.
	PngOptimizationLevel *int `form:"pngOptimizationLevel,omitempty" json:"pngOptimizationLevel,omitempty"`

	// ProgressiveJpeg It toggles the generation of a progressive JPEG. A "false" value generates a baseline JPEG
	ProgressiveJpeg *bool `form:"progressiveJpeg,omitempty" json:"progressiveJpeg,omitempty"`
}

// ContrastAsyncGetParams defines parameters for ContrastAsyncGet.
type ContrastAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Percentage controls the contrast level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// ContrastAsyncPostParams defines parameters for ContrastAsyncPost.
type ContrastAsyncPostParams struct {
	// Percentage controls the contrast level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// ContrastSyncGetParams defines parameters for ContrastSyncGet.
type ContrastSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Percentage controls the contrast level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// ContrastSyncPostParams defines parameters for ContrastSyncPost.
type ContrastSyncPostParams struct {
	// Percentage controls the contrast level
	Percentage *float32 `form:"percentage,omitempty" json:"percentage,omitempty"`
}

// ConvertAsyncGetParams defines parameters for ConvertAsyncGet.
type ConvertAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url          string                             `form:"url" json:"url"`
	TargetFormat *ConvertAsyncGetParamsTargetFormat `form:"targetFormat,omitempty" json:"targetFormat,omitempty"`
}

// ConvertAsyncGetParamsTargetFormat defines parameters for ConvertAsyncGet.
type ConvertAsyncGetParamsTargetFormat string

// ConvertAsyncPostParams defines parameters for ConvertAsyncPost.
type ConvertAsyncPostParams struct {
	TargetFormat *ConvertAsyncPostParamsTargetFormat `form:"targetFormat,omitempty" json:"targetFormat,omitempty"`
}

// ConvertAsyncPostParamsTargetFormat defines parameters for ConvertAsyncPost.
type ConvertAsyncPostParamsTargetFormat string

// ConvertSyncGetParams defines parameters for ConvertSyncGet.
type ConvertSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url          string                            `form:"url" json:"url"`
	TargetFormat *ConvertSyncGetParamsTargetFormat `form:"targetFormat,omitempty" json:"targetFormat,omitempty"`
}

// ConvertSyncGetParamsTargetFormat defines parameters for ConvertSyncGet.
type ConvertSyncGetParamsTargetFormat string

// ConvertSyncPostParams defines parameters for ConvertSyncPost.
type ConvertSyncPostParams struct {
	TargetFormat *ConvertSyncPostParamsTargetFormat `form:"targetFormat,omitempty" json:"targetFormat,omitempty"`
}

// ConvertSyncPostParamsTargetFormat defines parameters for ConvertSyncPost.
type ConvertSyncPostParamsTargetFormat string

// CropAsyncGetParams defines parameters for CropAsyncGet.
type CropAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// X0 the x coordinate of the first point of the rectangle to crop.
	X0 int `form:"x0" json:"x0"`

	// X1 the x coordinate of the second point of the rectangle to crop.
	X1 int `form:"x1" json:"x1"`

	// Y0 the y coordinate of the first point of the rectangle to crop.
	Y0 int `form:"y0" json:"y0"`

	// Y1 the y coordinate of the second point of the rectangle to crop.
	Y1 int `form:"y1" json:"y1"`
}

// CropAsyncPostParams defines parameters for CropAsyncPost.
type CropAsyncPostParams struct {
	// X0 the x coordinate of the first point of the rectangle to crop.
	X0 int `form:"x0" json:"x0"`

	// X1 the x coordinate of the second point of the rectangle to crop.
	X1 int `form:"x1" json:"x1"`

	// Y0 the y coordinate of the first point of the rectangle to crop.
	Y0 int `form:"y0" json:"y0"`

	// Y1 the y coordinate of the second point of the rectangle to crop.
	Y1 int `form:"y1" json:"y1"`
}

// CropSyncGetParams defines parameters for CropSyncGet.
type CropSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// X0 the x coordinate of the first point of the rectangle to crop.
	X0 int `form:"x0" json:"x0"`

	// X1 the x coordinate of the second point of the rectangle to crop.
	X1 int `form:"x1" json:"x1"`

	// Y0 the y coordinate of the first point of the rectangle to crop.
	Y0 int `form:"y0" json:"y0"`

	// Y1 the y coordinate of the second point of the rectangle to crop.
	Y1 int `form:"y1" json:"y1"`
}

// CropSyncPostParams defines parameters for CropSyncPost.
type CropSyncPostParams struct {
	// X0 the x coordinate of the first point of the rectangle to crop.
	X0 int `form:"x0" json:"x0"`

	// X1 the x coordinate of the second point of the rectangle to crop.
	X1 int `form:"x1" json:"x1"`

	// Y0 the y coordinate of the first point of the rectangle to crop.
	Y0 int `form:"y0" json:"y0"`

	// Y1 the y coordinate of the second point of the rectangle to crop.
	Y1 int `form:"y1" json:"y1"`
}

// EqualizeAsyncGetParams defines parameters for EqualizeAsyncGet.
type EqualizeAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`
}

// EqualizeSyncGetParams defines parameters for EqualizeSyncGet.
type EqualizeSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`
}

// GrayscaleAsyncGetParams defines parameters for GrayscaleAsyncGet.
type GrayscaleAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`
}

// GrayscaleSyncGetParams defines parameters for GrayscaleSyncGet.
type GrayscaleSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`
}

// ImageinfoSyncGetParams defines parameters for ImageinfoSyncGet.
type ImageinfoSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`
}

// PipelineGetParams defines parameters for PipelineGet.
type PipelineGetParams struct {
	// Url image url, supported formats jpeg,png,bmp
	Url string `form:"url" json:"url"`
}

// ResizeAsyncGetParams defines parameters for ResizeAsyncGet.
type ResizeAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url    string `form:"url" json:"url"`
	Height int    `form:"height" json:"height"`

	// ResamplingAlgorithm It allows changing the resampling algorithm used when resizing (resampling) the image.
	ResamplingAlgorithm *ResizeAsyncGetParamsResamplingAlgorithm `form:"resamplingAlgorithm,omitempty" json:"resamplingAlgorithm,omitempty"`
	Width               int                                      `form:"width" json:"width"`
}

// ResizeAsyncGetParamsResamplingAlgorithm defines parameters for ResizeAsyncGet.
type ResizeAsyncGetParamsResamplingAlgorithm string

// ResizeAsyncPostParams defines parameters for ResizeAsyncPost.
type ResizeAsyncPostParams struct {
	Height int `form:"height" json:"height"`

	// ResamplingAlgorithm It allows changing the resampling algorithm used when resizing (resampling) the image.
	ResamplingAlgorithm *ResizeAsyncPostParamsResamplingAlgorithm `form:"resamplingAlgorithm,omitempty" json:"resamplingAlgorithm,omitempty"`
	Width               int                                       `form:"width" json:"width"`
}

// ResizeAsyncPostParamsResamplingAlgorithm defines parameters for ResizeAsyncPost.
type ResizeAsyncPostParamsResamplingAlgorithm string

// ResizeSyncGetParams defines parameters for ResizeSyncGet.
type ResizeSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url    string `form:"url" json:"url"`
	Height int    `form:"height" json:"height"`

	// ResamplingAlgorithm It allows changing the resampling algorithm used when resizing (resampling) the image.
	ResamplingAlgorithm *ResizeSyncGetParamsResamplingAlgorithm `form:"resamplingAlgorithm,omitempty" json:"resamplingAlgorithm,omitempty"`
	Width               int                                     `form:"width" json:"width"`
}

// ResizeSyncGetParamsResamplingAlgorithm defines parameters for ResizeSyncGet.
type ResizeSyncGetParamsResamplingAlgorithm string

// ResizeSyncPostParams defines parameters for ResizeSyncPost.
type ResizeSyncPostParams struct {
	Height int `form:"height" json:"height"`

	// ResamplingAlgorithm It allows changing the resampling algorithm used when resizing (resampling) the image.
	ResamplingAlgorithm *ResizeSyncPostParamsResamplingAlgorithm `form:"resamplingAlgorithm,omitempty" json:"resamplingAlgorithm,omitempty"`
	Width               int                                      `form:"width" json:"width"`
}

// ResizeSyncPostParamsResamplingAlgorithm defines parameters for ResizeSyncPost.
type ResizeSyncPostParamsResamplingAlgorithm string

// RotateAsyncGetParams defines parameters for RotateAsyncGet.
type RotateAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Angle rotation angle in degrees
	Angle *float32 `form:"angle,omitempty" json:"angle,omitempty"`

	// BackgroundColor the color that should be used to fill the empty surfaces after rotating the image. Must be a valid color name (supported names are specified [here](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	BackgroundColor *string `form:"backgroundColor,omitempty" json:"backgroundColor,omitempty"`
}

// RotateAsyncPostParams defines parameters for RotateAsyncPost.
type RotateAsyncPostParams struct {
	// Angle rotation angle in degrees
	Angle *float32 `form:"angle,omitempty" json:"angle,omitempty"`

	// BackgroundColor the color that should be used to fill the empty surfaces after rotating the image. Must be a valid color name (supported names are specified [here](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	BackgroundColor *string `form:"backgroundColor,omitempty" json:"backgroundColor,omitempty"`
}

// RotateSyncGetParams defines parameters for RotateSyncGet.
type RotateSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Angle rotation angle in degrees
	Angle *float32 `form:"angle,omitempty" json:"angle,omitempty"`

	// BackgroundColor the color that should be used to fill the empty surfaces after rotating the image. Must be a valid color name (supported names are specified [here](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	BackgroundColor *string `form:"backgroundColor,omitempty" json:"backgroundColor,omitempty"`
}

// RotateSyncPostParams defines parameters for RotateSyncPost.
type RotateSyncPostParams struct {
	// Angle rotation angle in degrees
	Angle *float32 `form:"angle,omitempty" json:"angle,omitempty"`

	// BackgroundColor the color that should be used to fill the empty surfaces after rotating the image. Must be a valid color name (supported names are specified [here](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	BackgroundColor *string `form:"backgroundColor,omitempty" json:"backgroundColor,omitempty"`
}

// TextAsyncGetParams defines parameters for TextAsyncGet.
type TextAsyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Color defines the color of the text. Must be a valid color name (supported names are specified here  [https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	Color *string `form:"color,omitempty" json:"color,omitempty"`

	// Font defines the font type name. Possible values can be found [here](https://api-docs.imager200.io/fonts_example/). (More fonts can be added on request)
	Font *string `form:"font,omitempty" json:"font,omitempty"`

	// Size the text size in pixels.
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`

	// Text the text to be added.
	Text string `form:"text" json:"text"`

	// X the x coordinate in pixels of the point where the text will be added.
	X *int `form:"x,omitempty" json:"x,omitempty"`

	// Y the y coordinate in pixels of the point where the text will be added.
	Y *int `form:"y,omitempty" json:"y,omitempty"`
}

// TextAsyncPostParams defines parameters for TextAsyncPost.
type TextAsyncPostParams struct {
	// Color defines the color of the text. Must be a valid color name (supported names are specified here  [https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	Color *string `form:"color,omitempty" json:"color,omitempty"`

	// Font defines the font type name. Possible values can be found [here](https://api-docs.imager200.io/fonts_example/). (More fonts can be added on request)
	Font *string `form:"font,omitempty" json:"font,omitempty"`

	// Size the text size in pixels.
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`

	// Text the text to be added.
	Text string `form:"text" json:"text"`

	// X the x coordinate in pixels of the point where the text will be added.
	X *int `form:"x,omitempty" json:"x,omitempty"`

	// Y the y coordinate in pixels of the point where the text will be added.
	Y *int `form:"y,omitempty" json:"y,omitempty"`
}

// TextSyncGetParams defines parameters for TextSyncGet.
type TextSyncGetParams struct {
	// Url image url, supported formats jpeg,png,bmp,gif
	Url string `form:"url" json:"url"`

	// Color defines the color of the text. Must be a valid color name (supported names are specified here  [https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	Color *string `form:"color,omitempty" json:"color,omitempty"`

	// Font defines the font type name. Possible values can be found [here](https://api-docs.imager200.io/fonts_example/). (More fonts can be added on request)
	Font *string `form:"font,omitempty" json:"font,omitempty"`

	// Size the text size in pixels.
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`

	// Text the text to be added.
	Text string `form:"text" json:"text"`

	// X the x coordinate in pixels of the point where the text will be added.
	X *int `form:"x,omitempty" json:"x,omitempty"`

	// Y the y coordinate in pixels of the point where the text will be added.
	Y *int `form:"y,omitempty" json:"y,omitempty"`
}

// TextSyncPostParams defines parameters for TextSyncPost.
type TextSyncPostParams struct {
	// Color defines the color of the text. Must be a valid color name (supported names are specified here  [https://www.w3schools.com/colors/colors_names.asp](https://www.w3schools.com/colors/colors_names.asp)) or hexadecimal code.
	Color *string `form:"color,omitempty" json:"color,omitempty"`

	// Font defines the font type name. Possible values can be found [here](https://api-docs.imager200.io/fonts_example/). (More fonts can be added on request)
	Font *string `form:"font,omitempty" json:"font,omitempty"`

	// Size the text size in pixels.
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`

	// Text the text to be added.
	Text string `form:"text" json:"text"`

	// X the x coordinate in pixels of the point where the text will be added.
	X *int `form:"x,omitempty" json:"x,omitempty"`

	// Y the y coordinate in pixels of the point where the text will be added.
	Y *int `form:"y,omitempty" json:"y,omitempty"`
}

// BlendAsyncPostJSONRequestBody defines body for BlendAsyncPost for application/json ContentType.
type BlendAsyncPostJSONRequestBody = BlendRequest

// BlendSyncPostJSONRequestBody defines body for BlendSyncPost for application/json ContentType.
type BlendSyncPostJSONRequestBody = BlendRequest

// ConcatAsyncPostJSONRequestBody defines body for ConcatAsyncPost for application/json ContentType.
type ConcatAsyncPostJSONRequestBody = ConcatRequest

// ConcatSyncPostJSONRequestBody defines body for ConcatSyncPost for application/json ContentType.
type ConcatSyncPostJSONRequestBody = ConcatRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BlendAsyncPostWithBody request with any body
	BlendAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BlendAsyncPost(ctx context.Context, body BlendAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlendSyncPostWithBody request with any body
	BlendSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BlendSyncPost(ctx context.Context, body BlendSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurAsyncGet request
	BlurAsyncGet(ctx context.Context, params *BlurAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurAsyncPostWithBody request with any body
	BlurAsyncPostWithBody(ctx context.Context, params *BlurAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurSyncGet request
	BlurSyncGet(ctx context.Context, params *BlurSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurSyncPostWithBody request with any body
	BlurSyncPostWithBody(ctx context.Context, params *BlurSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurhashAsyncGet request
	BlurhashAsyncGet(ctx context.Context, params *BlurhashAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurhashAsyncPostWithBody request with any body
	BlurhashAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurhashSyncGet request
	BlurhashSyncGet(ctx context.Context, params *BlurhashSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurhashSyncPostWithBody request with any body
	BlurhashSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurpartialAsyncGet request
	BlurpartialAsyncGet(ctx context.Context, params *BlurpartialAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurpartialAsyncPostWithBody request with any body
	BlurpartialAsyncPostWithBody(ctx context.Context, params *BlurpartialAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurpartialSyncGet request
	BlurpartialSyncGet(ctx context.Context, params *BlurpartialSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BlurpartialSyncPostWithBody request with any body
	BlurpartialSyncPostWithBody(ctx context.Context, params *BlurpartialSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BrightnessAsyncGet request
	BrightnessAsyncGet(ctx context.Context, params *BrightnessAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BrightnessAsyncPostWithBody request with any body
	BrightnessAsyncPostWithBody(ctx context.Context, params *BrightnessAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BrightnessSyncGet request
	BrightnessSyncGet(ctx context.Context, params *BrightnessSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BrightnessSyncPostWithBody request with any body
	BrightnessSyncPostWithBody(ctx context.Context, params *BrightnessSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompressAsyncGet request
	CompressAsyncGet(ctx context.Context, params *CompressAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompressAsyncPostWithBody request with any body
	CompressAsyncPostWithBody(ctx context.Context, params *CompressAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompressSyncGet request
	CompressSyncGet(ctx context.Context, params *CompressSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompressSyncPostWithBody request with any body
	CompressSyncPostWithBody(ctx context.Context, params *CompressSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConcatAsyncPostWithBody request with any body
	ConcatAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConcatAsyncPost(ctx context.Context, body ConcatAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConcatSyncPostWithBody request with any body
	ConcatSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConcatSyncPost(ctx context.Context, body ConcatSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContrastAsyncGet request
	ContrastAsyncGet(ctx context.Context, params *ContrastAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContrastAsyncPostWithBody request with any body
	ContrastAsyncPostWithBody(ctx context.Context, params *ContrastAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContrastSyncGet request
	ContrastSyncGet(ctx context.Context, params *ContrastSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContrastSyncPostWithBody request with any body
	ContrastSyncPostWithBody(ctx context.Context, params *ContrastSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertAsyncGet request
	ConvertAsyncGet(ctx context.Context, params *ConvertAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertAsyncPostWithBody request with any body
	ConvertAsyncPostWithBody(ctx context.Context, params *ConvertAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertSyncGet request
	ConvertSyncGet(ctx context.Context, params *ConvertSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertSyncPostWithBody request with any body
	ConvertSyncPostWithBody(ctx context.Context, params *ConvertSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CropAsyncGet request
	CropAsyncGet(ctx context.Context, params *CropAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CropAsyncPostWithBody request with any body
	CropAsyncPostWithBody(ctx context.Context, params *CropAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CropSyncGet request
	CropSyncGet(ctx context.Context, params *CropSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CropSyncPostWithBody request with any body
	CropSyncPostWithBody(ctx context.Context, params *CropSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EqualizeAsyncGet request
	EqualizeAsyncGet(ctx context.Context, params *EqualizeAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EqualizeAsyncPostWithBody request with any body
	EqualizeAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EqualizeSyncGet request
	EqualizeSyncGet(ctx context.Context, params *EqualizeSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EqualizeSyncPostWithBody request with any body
	EqualizeSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GrayscaleAsyncGet request
	GrayscaleAsyncGet(ctx context.Context, params *GrayscaleAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GrayscaleAsyncPostWithBody request with any body
	GrayscaleAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GrayscaleSyncGet request
	GrayscaleSyncGet(ctx context.Context, params *GrayscaleSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GrayscaleSyncPostWithBody request with any body
	GrayscaleSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImageinfoSyncGet request
	ImageinfoSyncGet(ctx context.Context, params *ImageinfoSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImageinfoSyncPostWithBody request with any body
	ImageinfoSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PipelineGetStatus request
	PipelineGetStatus(ctx context.Context, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PipelineGet request
	PipelineGet(ctx context.Context, name string, params *PipelineGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PipelinePostWithBody request with any body
	PipelinePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResizeAsyncGet request
	ResizeAsyncGet(ctx context.Context, params *ResizeAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResizeAsyncPostWithBody request with any body
	ResizeAsyncPostWithBody(ctx context.Context, params *ResizeAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResizeSyncGet request
	ResizeSyncGet(ctx context.Context, params *ResizeSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResizeSyncPostWithBody request with any body
	ResizeSyncPostWithBody(ctx context.Context, params *ResizeSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateAsyncGet request
	RotateAsyncGet(ctx context.Context, params *RotateAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateAsyncPostWithBody request with any body
	RotateAsyncPostWithBody(ctx context.Context, params *RotateAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateSyncGet request
	RotateSyncGet(ctx context.Context, params *RotateSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateSyncPostWithBody request with any body
	RotateSyncPostWithBody(ctx context.Context, params *RotateSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextAsyncGet request
	TextAsyncGet(ctx context.Context, params *TextAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextAsyncPostWithBody request with any body
	TextAsyncPostWithBody(ctx context.Context, params *TextAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextSyncGet request
	TextSyncGet(ctx context.Context, params *TextSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TextSyncPostWithBody request with any body
	TextSyncPostWithBody(ctx context.Context, params *TextSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BlendAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlendAsyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlendAsyncPost(ctx context.Context, body BlendAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlendAsyncPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlendSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlendSyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlendSyncPost(ctx context.Context, body BlendSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlendSyncPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurAsyncGet(ctx context.Context, params *BlurAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurAsyncPostWithBody(ctx context.Context, params *BlurAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurSyncGet(ctx context.Context, params *BlurSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurSyncPostWithBody(ctx context.Context, params *BlurSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurhashAsyncGet(ctx context.Context, params *BlurhashAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurhashAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurhashAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurhashAsyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurhashSyncGet(ctx context.Context, params *BlurhashSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurhashSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurhashSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurhashSyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurpartialAsyncGet(ctx context.Context, params *BlurpartialAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurpartialAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurpartialAsyncPostWithBody(ctx context.Context, params *BlurpartialAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurpartialAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurpartialSyncGet(ctx context.Context, params *BlurpartialSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurpartialSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BlurpartialSyncPostWithBody(ctx context.Context, params *BlurpartialSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBlurpartialSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BrightnessAsyncGet(ctx context.Context, params *BrightnessAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBrightnessAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BrightnessAsyncPostWithBody(ctx context.Context, params *BrightnessAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBrightnessAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BrightnessSyncGet(ctx context.Context, params *BrightnessSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBrightnessSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BrightnessSyncPostWithBody(ctx context.Context, params *BrightnessSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBrightnessSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressAsyncGet(ctx context.Context, params *CompressAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressAsyncPostWithBody(ctx context.Context, params *CompressAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressSyncGet(ctx context.Context, params *CompressSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressSyncPostWithBody(ctx context.Context, params *CompressSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConcatAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConcatAsyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConcatAsyncPost(ctx context.Context, body ConcatAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConcatAsyncPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConcatSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConcatSyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConcatSyncPost(ctx context.Context, body ConcatSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConcatSyncPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContrastAsyncGet(ctx context.Context, params *ContrastAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContrastAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContrastAsyncPostWithBody(ctx context.Context, params *ContrastAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContrastAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContrastSyncGet(ctx context.Context, params *ContrastSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContrastSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContrastSyncPostWithBody(ctx context.Context, params *ContrastSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContrastSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertAsyncGet(ctx context.Context, params *ConvertAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertAsyncPostWithBody(ctx context.Context, params *ConvertAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertSyncGet(ctx context.Context, params *ConvertSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertSyncPostWithBody(ctx context.Context, params *ConvertSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CropAsyncGet(ctx context.Context, params *CropAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCropAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CropAsyncPostWithBody(ctx context.Context, params *CropAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCropAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CropSyncGet(ctx context.Context, params *CropSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCropSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CropSyncPostWithBody(ctx context.Context, params *CropSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCropSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EqualizeAsyncGet(ctx context.Context, params *EqualizeAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEqualizeAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EqualizeAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEqualizeAsyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EqualizeSyncGet(ctx context.Context, params *EqualizeSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEqualizeSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EqualizeSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEqualizeSyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GrayscaleAsyncGet(ctx context.Context, params *GrayscaleAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGrayscaleAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GrayscaleAsyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGrayscaleAsyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GrayscaleSyncGet(ctx context.Context, params *GrayscaleSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGrayscaleSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GrayscaleSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGrayscaleSyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImageinfoSyncGet(ctx context.Context, params *ImageinfoSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImageinfoSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImageinfoSyncPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImageinfoSyncPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelineGetStatus(ctx context.Context, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelineGetStatusRequest(c.Server, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelineGet(ctx context.Context, name string, params *PipelineGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelineGetRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelinePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelinePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeAsyncGet(ctx context.Context, params *ResizeAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeAsyncPostWithBody(ctx context.Context, params *ResizeAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeSyncGet(ctx context.Context, params *ResizeSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeSyncPostWithBody(ctx context.Context, params *ResizeSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateAsyncGet(ctx context.Context, params *RotateAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateAsyncPostWithBody(ctx context.Context, params *RotateAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateSyncGet(ctx context.Context, params *RotateSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateSyncPostWithBody(ctx context.Context, params *RotateSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextAsyncGet(ctx context.Context, params *TextAsyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextAsyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextAsyncPostWithBody(ctx context.Context, params *TextAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextAsyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextSyncGet(ctx context.Context, params *TextSyncGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextSyncGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TextSyncPostWithBody(ctx context.Context, params *TextSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTextSyncPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBlendAsyncPostRequest calls the generic BlendAsyncPost builder with application/json body
func NewBlendAsyncPostRequest(server string, body BlendAsyncPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBlendAsyncPostRequestWithBody(server, "application/json", bodyReader)
}

// NewBlendAsyncPostRequestWithBody generates requests for BlendAsyncPost with any type of body
func NewBlendAsyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlendSyncPostRequest calls the generic BlendSyncPost builder with application/json body
func NewBlendSyncPostRequest(server string, body BlendSyncPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBlendSyncPostRequestWithBody(server, "application/json", bodyReader)
}

// NewBlendSyncPostRequestWithBody generates requests for BlendSyncPost with any type of body
func NewBlendSyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blend/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlurAsyncGetRequest generates requests for BlurAsyncGet
func NewBlurAsyncGetRequest(server string, params *BlurAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blur")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlurAsyncPostRequestWithBody generates requests for BlurAsyncPost with any type of body
func NewBlurAsyncPostRequestWithBody(server string, params *BlurAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blur")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlurSyncGetRequest generates requests for BlurSyncGet
func NewBlurSyncGetRequest(server string, params *BlurSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blur/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlurSyncPostRequestWithBody generates requests for BlurSyncPost with any type of body
func NewBlurSyncPostRequestWithBody(server string, params *BlurSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blur/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlurhashAsyncGetRequest generates requests for BlurhashAsyncGet
func NewBlurhashAsyncGetRequest(server string, params *BlurhashAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurhash")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlurhashAsyncPostRequestWithBody generates requests for BlurhashAsyncPost with any type of body
func NewBlurhashAsyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurhash")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlurhashSyncGetRequest generates requests for BlurhashSyncGet
func NewBlurhashSyncGetRequest(server string, params *BlurhashSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurhash/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlurhashSyncPostRequestWithBody generates requests for BlurhashSyncPost with any type of body
func NewBlurhashSyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurhash/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlurpartialAsyncGetRequest generates requests for BlurpartialAsyncGet
func NewBlurpartialAsyncGetRequest(server string, params *BlurpartialAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurpartial")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlurpartialAsyncPostRequestWithBody generates requests for BlurpartialAsyncPost with any type of body
func NewBlurpartialAsyncPostRequestWithBody(server string, params *BlurpartialAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurpartial")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBlurpartialSyncGetRequest generates requests for BlurpartialSyncGet
func NewBlurpartialSyncGetRequest(server string, params *BlurpartialSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurpartial/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBlurpartialSyncPostRequestWithBody generates requests for BlurpartialSyncPost with any type of body
func NewBlurpartialSyncPostRequestWithBody(server string, params *BlurpartialSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/blurpartial/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sigma != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sigma", runtime.ParamLocationQuery, *params.Sigma); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBrightnessAsyncGetRequest generates requests for BrightnessAsyncGet
func NewBrightnessAsyncGetRequest(server string, params *BrightnessAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/brightness")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBrightnessAsyncPostRequestWithBody generates requests for BrightnessAsyncPost with any type of body
func NewBrightnessAsyncPostRequestWithBody(server string, params *BrightnessAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/brightness")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBrightnessSyncGetRequest generates requests for BrightnessSyncGet
func NewBrightnessSyncGetRequest(server string, params *BrightnessSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/brightness/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBrightnessSyncPostRequestWithBody generates requests for BrightnessSyncPost with any type of body
func NewBrightnessSyncPostRequestWithBody(server string, params *BrightnessSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/brightness/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompressAsyncGetRequest generates requests for CompressAsyncGet
func NewCompressAsyncGetRequest(server string, params *CompressAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.JpegQuality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jpegQuality", runtime.ParamLocationQuery, *params.JpegQuality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PngOptimizationLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pngOptimizationLevel", runtime.ParamLocationQuery, *params.PngOptimizationLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProgressiveJpeg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "progressiveJpeg", runtime.ParamLocationQuery, *params.ProgressiveJpeg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompressAsyncPostRequestWithBody generates requests for CompressAsyncPost with any type of body
func NewCompressAsyncPostRequestWithBody(server string, params *CompressAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.JpegQuality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jpegQuality", runtime.ParamLocationQuery, *params.JpegQuality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PngOptimizationLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pngOptimizationLevel", runtime.ParamLocationQuery, *params.PngOptimizationLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProgressiveJpeg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "progressiveJpeg", runtime.ParamLocationQuery, *params.ProgressiveJpeg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompressSyncGetRequest generates requests for CompressSyncGet
func NewCompressSyncGetRequest(server string, params *CompressSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compress/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.JpegQuality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jpegQuality", runtime.ParamLocationQuery, *params.JpegQuality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PngOptimizationLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pngOptimizationLevel", runtime.ParamLocationQuery, *params.PngOptimizationLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProgressiveJpeg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "progressiveJpeg", runtime.ParamLocationQuery, *params.ProgressiveJpeg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompressSyncPostRequestWithBody generates requests for CompressSyncPost with any type of body
func NewCompressSyncPostRequestWithBody(server string, params *CompressSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compress/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.JpegQuality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jpegQuality", runtime.ParamLocationQuery, *params.JpegQuality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PngOptimizationLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pngOptimizationLevel", runtime.ParamLocationQuery, *params.PngOptimizationLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProgressiveJpeg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "progressiveJpeg", runtime.ParamLocationQuery, *params.ProgressiveJpeg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConcatAsyncPostRequest calls the generic ConcatAsyncPost builder with application/json body
func NewConcatAsyncPostRequest(server string, body ConcatAsyncPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConcatAsyncPostRequestWithBody(server, "application/json", bodyReader)
}

// NewConcatAsyncPostRequestWithBody generates requests for ConcatAsyncPost with any type of body
func NewConcatAsyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConcatSyncPostRequest calls the generic ConcatSyncPost builder with application/json body
func NewConcatSyncPostRequest(server string, body ConcatSyncPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConcatSyncPostRequestWithBody(server, "application/json", bodyReader)
}

// NewConcatSyncPostRequestWithBody generates requests for ConcatSyncPost with any type of body
func NewConcatSyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/concat/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContrastAsyncGetRequest generates requests for ContrastAsyncGet
func NewContrastAsyncGetRequest(server string, params *ContrastAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contrast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContrastAsyncPostRequestWithBody generates requests for ContrastAsyncPost with any type of body
func NewContrastAsyncPostRequestWithBody(server string, params *ContrastAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contrast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContrastSyncGetRequest generates requests for ContrastSyncGet
func NewContrastSyncGetRequest(server string, params *ContrastSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contrast/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContrastSyncPostRequestWithBody generates requests for ContrastSyncPost with any type of body
func NewContrastSyncPostRequestWithBody(server string, params *ContrastSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contrast/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Percentage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "percentage", runtime.ParamLocationQuery, *params.Percentage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConvertAsyncGetRequest generates requests for ConvertAsyncGet
func NewConvertAsyncGetRequest(server string, params *ConvertAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TargetFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetFormat", runtime.ParamLocationQuery, *params.TargetFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConvertAsyncPostRequestWithBody generates requests for ConvertAsyncPost with any type of body
func NewConvertAsyncPostRequestWithBody(server string, params *ConvertAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TargetFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetFormat", runtime.ParamLocationQuery, *params.TargetFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConvertSyncGetRequest generates requests for ConvertSyncGet
func NewConvertSyncGetRequest(server string, params *ConvertSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TargetFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetFormat", runtime.ParamLocationQuery, *params.TargetFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConvertSyncPostRequestWithBody generates requests for ConvertSyncPost with any type of body
func NewConvertSyncPostRequestWithBody(server string, params *ConvertSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/convert/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TargetFormat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetFormat", runtime.ParamLocationQuery, *params.TargetFormat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCropAsyncGetRequest generates requests for CropAsyncGet
func NewCropAsyncGetRequest(server string, params *CropAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCropAsyncPostRequestWithBody generates requests for CropAsyncPost with any type of body
func NewCropAsyncPostRequestWithBody(server string, params *CropAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCropSyncGetRequest generates requests for CropSyncGet
func NewCropSyncGetRequest(server string, params *CropSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crop/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCropSyncPostRequestWithBody generates requests for CropSyncPost with any type of body
func NewCropSyncPostRequestWithBody(server string, params *CropSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crop/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x0", runtime.ParamLocationQuery, params.X0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x1", runtime.ParamLocationQuery, params.X1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y0", runtime.ParamLocationQuery, params.Y0); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y1", runtime.ParamLocationQuery, params.Y1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEqualizeAsyncGetRequest generates requests for EqualizeAsyncGet
func NewEqualizeAsyncGetRequest(server string, params *EqualizeAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/equalize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEqualizeAsyncPostRequestWithBody generates requests for EqualizeAsyncPost with any type of body
func NewEqualizeAsyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/equalize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEqualizeSyncGetRequest generates requests for EqualizeSyncGet
func NewEqualizeSyncGetRequest(server string, params *EqualizeSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/equalize/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEqualizeSyncPostRequestWithBody generates requests for EqualizeSyncPost with any type of body
func NewEqualizeSyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/equalize/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGrayscaleAsyncGetRequest generates requests for GrayscaleAsyncGet
func NewGrayscaleAsyncGetRequest(server string, params *GrayscaleAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grayscale")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGrayscaleAsyncPostRequestWithBody generates requests for GrayscaleAsyncPost with any type of body
func NewGrayscaleAsyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grayscale")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGrayscaleSyncGetRequest generates requests for GrayscaleSyncGet
func NewGrayscaleSyncGetRequest(server string, params *GrayscaleSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grayscale/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGrayscaleSyncPostRequestWithBody generates requests for GrayscaleSyncPost with any type of body
func NewGrayscaleSyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grayscale/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImageinfoSyncGetRequest generates requests for ImageinfoSyncGet
func NewImageinfoSyncGetRequest(server string, params *ImageinfoSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/imageinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImageinfoSyncPostRequestWithBody generates requests for ImageinfoSyncPost with any type of body
func NewImageinfoSyncPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/imageinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPipelineGetStatusRequest generates requests for PipelineGetStatus
func NewPipelineGetStatusRequest(server string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "execution_id", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipeline/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPipelineGetRequest generates requests for PipelineGet
func NewPipelineGetRequest(server string, name string, params *PipelineGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipeline/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPipelinePostRequestWithBody generates requests for PipelinePost with any type of body
func NewPipelinePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pipeline/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResizeAsyncGetRequest generates requests for ResizeAsyncGet
func NewResizeAsyncGetRequest(server string, params *ResizeAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, params.Height); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ResamplingAlgorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resamplingAlgorithm", runtime.ParamLocationQuery, *params.ResamplingAlgorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, params.Width); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResizeAsyncPostRequestWithBody generates requests for ResizeAsyncPost with any type of body
func NewResizeAsyncPostRequestWithBody(server string, params *ResizeAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, params.Height); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ResamplingAlgorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resamplingAlgorithm", runtime.ParamLocationQuery, *params.ResamplingAlgorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, params.Width); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResizeSyncGetRequest generates requests for ResizeSyncGet
func NewResizeSyncGetRequest(server string, params *ResizeSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resize/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, params.Height); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ResamplingAlgorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resamplingAlgorithm", runtime.ParamLocationQuery, *params.ResamplingAlgorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, params.Width); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResizeSyncPostRequestWithBody generates requests for ResizeSyncPost with any type of body
func NewResizeSyncPostRequestWithBody(server string, params *ResizeSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resize/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, params.Height); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ResamplingAlgorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resamplingAlgorithm", runtime.ParamLocationQuery, *params.ResamplingAlgorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, params.Width); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateAsyncGetRequest generates requests for RotateAsyncGet
func NewRotateAsyncGetRequest(server string, params *RotateAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rotate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Angle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "angle", runtime.ParamLocationQuery, *params.Angle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BackgroundColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backgroundColor", runtime.ParamLocationQuery, *params.BackgroundColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRotateAsyncPostRequestWithBody generates requests for RotateAsyncPost with any type of body
func NewRotateAsyncPostRequestWithBody(server string, params *RotateAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rotate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Angle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "angle", runtime.ParamLocationQuery, *params.Angle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BackgroundColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backgroundColor", runtime.ParamLocationQuery, *params.BackgroundColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateSyncGetRequest generates requests for RotateSyncGet
func NewRotateSyncGetRequest(server string, params *RotateSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rotate/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Angle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "angle", runtime.ParamLocationQuery, *params.Angle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BackgroundColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backgroundColor", runtime.ParamLocationQuery, *params.BackgroundColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRotateSyncPostRequestWithBody generates requests for RotateSyncPost with any type of body
func NewRotateSyncPostRequestWithBody(server string, params *RotateSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rotate/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Angle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "angle", runtime.ParamLocationQuery, *params.Angle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BackgroundColor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "backgroundColor", runtime.ParamLocationQuery, *params.BackgroundColor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTextAsyncGetRequest generates requests for TextAsyncGet
func NewTextAsyncGetRequest(server string, params *TextAsyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Font != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "font", runtime.ParamLocationQuery, *params.Font); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.X != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x", runtime.ParamLocationQuery, *params.X); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Y != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y", runtime.ParamLocationQuery, *params.Y); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTextAsyncPostRequestWithBody generates requests for TextAsyncPost with any type of body
func NewTextAsyncPostRequestWithBody(server string, params *TextAsyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Font != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "font", runtime.ParamLocationQuery, *params.Font); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.X != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x", runtime.ParamLocationQuery, *params.X); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Y != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y", runtime.ParamLocationQuery, *params.Y); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTextSyncGetRequest generates requests for TextSyncGet
func NewTextSyncGetRequest(server string, params *TextSyncGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Font != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "font", runtime.ParamLocationQuery, *params.Font); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.X != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x", runtime.ParamLocationQuery, *params.X); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Y != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y", runtime.ParamLocationQuery, *params.Y); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTextSyncPostRequestWithBody generates requests for TextSyncPost with any type of body
func NewTextSyncPostRequestWithBody(server string, params *TextSyncPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/text/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Color != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Font != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "font", runtime.ParamLocationQuery, *params.Font); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.X != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "x", runtime.ParamLocationQuery, *params.X); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Y != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "y", runtime.ParamLocationQuery, *params.Y); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BlendAsyncPostWithBodyWithResponse request with any body
	BlendAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlendAsyncPostResponse, error)

	BlendAsyncPostWithResponse(ctx context.Context, body BlendAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BlendAsyncPostResponse, error)

	// BlendSyncPostWithBodyWithResponse request with any body
	BlendSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlendSyncPostResponse, error)

	BlendSyncPostWithResponse(ctx context.Context, body BlendSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BlendSyncPostResponse, error)

	// BlurAsyncGetWithResponse request
	BlurAsyncGetWithResponse(ctx context.Context, params *BlurAsyncGetParams, reqEditors ...RequestEditorFn) (*BlurAsyncGetResponse, error)

	// BlurAsyncPostWithBodyWithResponse request with any body
	BlurAsyncPostWithBodyWithResponse(ctx context.Context, params *BlurAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurAsyncPostResponse, error)

	// BlurSyncGetWithResponse request
	BlurSyncGetWithResponse(ctx context.Context, params *BlurSyncGetParams, reqEditors ...RequestEditorFn) (*BlurSyncGetResponse, error)

	// BlurSyncPostWithBodyWithResponse request with any body
	BlurSyncPostWithBodyWithResponse(ctx context.Context, params *BlurSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurSyncPostResponse, error)

	// BlurhashAsyncGetWithResponse request
	BlurhashAsyncGetWithResponse(ctx context.Context, params *BlurhashAsyncGetParams, reqEditors ...RequestEditorFn) (*BlurhashAsyncGetResponse, error)

	// BlurhashAsyncPostWithBodyWithResponse request with any body
	BlurhashAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurhashAsyncPostResponse, error)

	// BlurhashSyncGetWithResponse request
	BlurhashSyncGetWithResponse(ctx context.Context, params *BlurhashSyncGetParams, reqEditors ...RequestEditorFn) (*BlurhashSyncGetResponse, error)

	// BlurhashSyncPostWithBodyWithResponse request with any body
	BlurhashSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurhashSyncPostResponse, error)

	// BlurpartialAsyncGetWithResponse request
	BlurpartialAsyncGetWithResponse(ctx context.Context, params *BlurpartialAsyncGetParams, reqEditors ...RequestEditorFn) (*BlurpartialAsyncGetResponse, error)

	// BlurpartialAsyncPostWithBodyWithResponse request with any body
	BlurpartialAsyncPostWithBodyWithResponse(ctx context.Context, params *BlurpartialAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurpartialAsyncPostResponse, error)

	// BlurpartialSyncGetWithResponse request
	BlurpartialSyncGetWithResponse(ctx context.Context, params *BlurpartialSyncGetParams, reqEditors ...RequestEditorFn) (*BlurpartialSyncGetResponse, error)

	// BlurpartialSyncPostWithBodyWithResponse request with any body
	BlurpartialSyncPostWithBodyWithResponse(ctx context.Context, params *BlurpartialSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurpartialSyncPostResponse, error)

	// BrightnessAsyncGetWithResponse request
	BrightnessAsyncGetWithResponse(ctx context.Context, params *BrightnessAsyncGetParams, reqEditors ...RequestEditorFn) (*BrightnessAsyncGetResponse, error)

	// BrightnessAsyncPostWithBodyWithResponse request with any body
	BrightnessAsyncPostWithBodyWithResponse(ctx context.Context, params *BrightnessAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BrightnessAsyncPostResponse, error)

	// BrightnessSyncGetWithResponse request
	BrightnessSyncGetWithResponse(ctx context.Context, params *BrightnessSyncGetParams, reqEditors ...RequestEditorFn) (*BrightnessSyncGetResponse, error)

	// BrightnessSyncPostWithBodyWithResponse request with any body
	BrightnessSyncPostWithBodyWithResponse(ctx context.Context, params *BrightnessSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BrightnessSyncPostResponse, error)

	// CompressAsyncGetWithResponse request
	CompressAsyncGetWithResponse(ctx context.Context, params *CompressAsyncGetParams, reqEditors ...RequestEditorFn) (*CompressAsyncGetResponse, error)

	// CompressAsyncPostWithBodyWithResponse request with any body
	CompressAsyncPostWithBodyWithResponse(ctx context.Context, params *CompressAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressAsyncPostResponse, error)

	// CompressSyncGetWithResponse request
	CompressSyncGetWithResponse(ctx context.Context, params *CompressSyncGetParams, reqEditors ...RequestEditorFn) (*CompressSyncGetResponse, error)

	// CompressSyncPostWithBodyWithResponse request with any body
	CompressSyncPostWithBodyWithResponse(ctx context.Context, params *CompressSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressSyncPostResponse, error)

	// ConcatAsyncPostWithBodyWithResponse request with any body
	ConcatAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConcatAsyncPostResponse, error)

	ConcatAsyncPostWithResponse(ctx context.Context, body ConcatAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ConcatAsyncPostResponse, error)

	// ConcatSyncPostWithBodyWithResponse request with any body
	ConcatSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConcatSyncPostResponse, error)

	ConcatSyncPostWithResponse(ctx context.Context, body ConcatSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ConcatSyncPostResponse, error)

	// ContrastAsyncGetWithResponse request
	ContrastAsyncGetWithResponse(ctx context.Context, params *ContrastAsyncGetParams, reqEditors ...RequestEditorFn) (*ContrastAsyncGetResponse, error)

	// ContrastAsyncPostWithBodyWithResponse request with any body
	ContrastAsyncPostWithBodyWithResponse(ctx context.Context, params *ContrastAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContrastAsyncPostResponse, error)

	// ContrastSyncGetWithResponse request
	ContrastSyncGetWithResponse(ctx context.Context, params *ContrastSyncGetParams, reqEditors ...RequestEditorFn) (*ContrastSyncGetResponse, error)

	// ContrastSyncPostWithBodyWithResponse request with any body
	ContrastSyncPostWithBodyWithResponse(ctx context.Context, params *ContrastSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContrastSyncPostResponse, error)

	// ConvertAsyncGetWithResponse request
	ConvertAsyncGetWithResponse(ctx context.Context, params *ConvertAsyncGetParams, reqEditors ...RequestEditorFn) (*ConvertAsyncGetResponse, error)

	// ConvertAsyncPostWithBodyWithResponse request with any body
	ConvertAsyncPostWithBodyWithResponse(ctx context.Context, params *ConvertAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertAsyncPostResponse, error)

	// ConvertSyncGetWithResponse request
	ConvertSyncGetWithResponse(ctx context.Context, params *ConvertSyncGetParams, reqEditors ...RequestEditorFn) (*ConvertSyncGetResponse, error)

	// ConvertSyncPostWithBodyWithResponse request with any body
	ConvertSyncPostWithBodyWithResponse(ctx context.Context, params *ConvertSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertSyncPostResponse, error)

	// CropAsyncGetWithResponse request
	CropAsyncGetWithResponse(ctx context.Context, params *CropAsyncGetParams, reqEditors ...RequestEditorFn) (*CropAsyncGetResponse, error)

	// CropAsyncPostWithBodyWithResponse request with any body
	CropAsyncPostWithBodyWithResponse(ctx context.Context, params *CropAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CropAsyncPostResponse, error)

	// CropSyncGetWithResponse request
	CropSyncGetWithResponse(ctx context.Context, params *CropSyncGetParams, reqEditors ...RequestEditorFn) (*CropSyncGetResponse, error)

	// CropSyncPostWithBodyWithResponse request with any body
	CropSyncPostWithBodyWithResponse(ctx context.Context, params *CropSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CropSyncPostResponse, error)

	// EqualizeAsyncGetWithResponse request
	EqualizeAsyncGetWithResponse(ctx context.Context, params *EqualizeAsyncGetParams, reqEditors ...RequestEditorFn) (*EqualizeAsyncGetResponse, error)

	// EqualizeAsyncPostWithBodyWithResponse request with any body
	EqualizeAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EqualizeAsyncPostResponse, error)

	// EqualizeSyncGetWithResponse request
	EqualizeSyncGetWithResponse(ctx context.Context, params *EqualizeSyncGetParams, reqEditors ...RequestEditorFn) (*EqualizeSyncGetResponse, error)

	// EqualizeSyncPostWithBodyWithResponse request with any body
	EqualizeSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EqualizeSyncPostResponse, error)

	// GrayscaleAsyncGetWithResponse request
	GrayscaleAsyncGetWithResponse(ctx context.Context, params *GrayscaleAsyncGetParams, reqEditors ...RequestEditorFn) (*GrayscaleAsyncGetResponse, error)

	// GrayscaleAsyncPostWithBodyWithResponse request with any body
	GrayscaleAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GrayscaleAsyncPostResponse, error)

	// GrayscaleSyncGetWithResponse request
	GrayscaleSyncGetWithResponse(ctx context.Context, params *GrayscaleSyncGetParams, reqEditors ...RequestEditorFn) (*GrayscaleSyncGetResponse, error)

	// GrayscaleSyncPostWithBodyWithResponse request with any body
	GrayscaleSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GrayscaleSyncPostResponse, error)

	// ImageinfoSyncGetWithResponse request
	ImageinfoSyncGetWithResponse(ctx context.Context, params *ImageinfoSyncGetParams, reqEditors ...RequestEditorFn) (*ImageinfoSyncGetResponse, error)

	// ImageinfoSyncPostWithBodyWithResponse request with any body
	ImageinfoSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImageinfoSyncPostResponse, error)

	// PipelineGetStatusWithResponse request
	PipelineGetStatusWithResponse(ctx context.Context, executionId string, reqEditors ...RequestEditorFn) (*PipelineGetStatusResponse, error)

	// PipelineGetWithResponse request
	PipelineGetWithResponse(ctx context.Context, name string, params *PipelineGetParams, reqEditors ...RequestEditorFn) (*PipelineGetResponse, error)

	// PipelinePostWithBodyWithResponse request with any body
	PipelinePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PipelinePostResponse, error)

	// ResizeAsyncGetWithResponse request
	ResizeAsyncGetWithResponse(ctx context.Context, params *ResizeAsyncGetParams, reqEditors ...RequestEditorFn) (*ResizeAsyncGetResponse, error)

	// ResizeAsyncPostWithBodyWithResponse request with any body
	ResizeAsyncPostWithBodyWithResponse(ctx context.Context, params *ResizeAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeAsyncPostResponse, error)

	// ResizeSyncGetWithResponse request
	ResizeSyncGetWithResponse(ctx context.Context, params *ResizeSyncGetParams, reqEditors ...RequestEditorFn) (*ResizeSyncGetResponse, error)

	// ResizeSyncPostWithBodyWithResponse request with any body
	ResizeSyncPostWithBodyWithResponse(ctx context.Context, params *ResizeSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeSyncPostResponse, error)

	// RotateAsyncGetWithResponse request
	RotateAsyncGetWithResponse(ctx context.Context, params *RotateAsyncGetParams, reqEditors ...RequestEditorFn) (*RotateAsyncGetResponse, error)

	// RotateAsyncPostWithBodyWithResponse request with any body
	RotateAsyncPostWithBodyWithResponse(ctx context.Context, params *RotateAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateAsyncPostResponse, error)

	// RotateSyncGetWithResponse request
	RotateSyncGetWithResponse(ctx context.Context, params *RotateSyncGetParams, reqEditors ...RequestEditorFn) (*RotateSyncGetResponse, error)

	// RotateSyncPostWithBodyWithResponse request with any body
	RotateSyncPostWithBodyWithResponse(ctx context.Context, params *RotateSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateSyncPostResponse, error)

	// TextAsyncGetWithResponse request
	TextAsyncGetWithResponse(ctx context.Context, params *TextAsyncGetParams, reqEditors ...RequestEditorFn) (*TextAsyncGetResponse, error)

	// TextAsyncPostWithBodyWithResponse request with any body
	TextAsyncPostWithBodyWithResponse(ctx context.Context, params *TextAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextAsyncPostResponse, error)

	// TextSyncGetWithResponse request
	TextSyncGetWithResponse(ctx context.Context, params *TextSyncGetParams, reqEditors ...RequestEditorFn) (*TextSyncGetResponse, error)

	// TextSyncPostWithBodyWithResponse request with any body
	TextSyncPostWithBodyWithResponse(ctx context.Context, params *TextSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextSyncPostResponse, error)
}

type BlendAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlendAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlendAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlendSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlendSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlendSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurhashAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurhashAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurhashAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurhashAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurhashAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurhashAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurhashSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurhashSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurhashSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurhashSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurhashSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurhashSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurpartialAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurpartialAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurpartialAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurpartialAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurpartialAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurpartialAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurpartialSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurpartialSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurpartialSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BlurpartialSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BlurpartialSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BlurpartialSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BrightnessAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BrightnessAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BrightnessAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BrightnessAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BrightnessAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BrightnessAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BrightnessSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BrightnessSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BrightnessSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BrightnessSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BrightnessSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BrightnessSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompressAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CompressAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompressAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompressAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CompressAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompressAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompressSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CompressSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompressSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompressSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CompressSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompressSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConcatAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConcatAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConcatAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConcatSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConcatSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConcatSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContrastAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContrastAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContrastAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContrastAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContrastAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContrastAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContrastSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContrastSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContrastSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContrastSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContrastSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContrastSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConvertAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConvertAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConvertSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConvertSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CropAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CropAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CropAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CropAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CropAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CropAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CropSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CropSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CropSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CropSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CropSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CropSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EqualizeAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EqualizeAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EqualizeAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EqualizeAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EqualizeAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EqualizeAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EqualizeSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EqualizeSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EqualizeSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EqualizeSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EqualizeSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EqualizeSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GrayscaleAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GrayscaleAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GrayscaleAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GrayscaleAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GrayscaleAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GrayscaleAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GrayscaleSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GrayscaleSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GrayscaleSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GrayscaleSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GrayscaleSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GrayscaleSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImageinfoSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageMetadata
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ImageinfoSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImageinfoSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImageinfoSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageMetadata
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ImageinfoSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImageinfoSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelineGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineExecutionResult
}

// Status returns HTTPResponse.Status
func (r PipelineGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelineGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelineGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SuccessResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PipelineGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelineGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelinePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SuccessResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PipelinePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelinePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResizeAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ResizeAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResizeAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResizeAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ResizeAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResizeAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResizeSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ResizeSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResizeSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResizeSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ResizeSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResizeSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RotateAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RotateAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RotateSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RotateSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextAsyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TextAsyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextAsyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextAsyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InfoResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TextAsyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextAsyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextSyncGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TextSyncGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextSyncGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TextSyncPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r TextSyncPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TextSyncPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BlendAsyncPostWithBodyWithResponse request with arbitrary body returning *BlendAsyncPostResponse
func (c *ClientWithResponses) BlendAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlendAsyncPostResponse, error) {
	rsp, err := c.BlendAsyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlendAsyncPostResponse(rsp)
}

func (c *ClientWithResponses) BlendAsyncPostWithResponse(ctx context.Context, body BlendAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BlendAsyncPostResponse, error) {
	rsp, err := c.BlendAsyncPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlendAsyncPostResponse(rsp)
}

// BlendSyncPostWithBodyWithResponse request with arbitrary body returning *BlendSyncPostResponse
func (c *ClientWithResponses) BlendSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlendSyncPostResponse, error) {
	rsp, err := c.BlendSyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlendSyncPostResponse(rsp)
}

func (c *ClientWithResponses) BlendSyncPostWithResponse(ctx context.Context, body BlendSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BlendSyncPostResponse, error) {
	rsp, err := c.BlendSyncPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlendSyncPostResponse(rsp)
}

// BlurAsyncGetWithResponse request returning *BlurAsyncGetResponse
func (c *ClientWithResponses) BlurAsyncGetWithResponse(ctx context.Context, params *BlurAsyncGetParams, reqEditors ...RequestEditorFn) (*BlurAsyncGetResponse, error) {
	rsp, err := c.BlurAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurAsyncGetResponse(rsp)
}

// BlurAsyncPostWithBodyWithResponse request with arbitrary body returning *BlurAsyncPostResponse
func (c *ClientWithResponses) BlurAsyncPostWithBodyWithResponse(ctx context.Context, params *BlurAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurAsyncPostResponse, error) {
	rsp, err := c.BlurAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurAsyncPostResponse(rsp)
}

// BlurSyncGetWithResponse request returning *BlurSyncGetResponse
func (c *ClientWithResponses) BlurSyncGetWithResponse(ctx context.Context, params *BlurSyncGetParams, reqEditors ...RequestEditorFn) (*BlurSyncGetResponse, error) {
	rsp, err := c.BlurSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurSyncGetResponse(rsp)
}

// BlurSyncPostWithBodyWithResponse request with arbitrary body returning *BlurSyncPostResponse
func (c *ClientWithResponses) BlurSyncPostWithBodyWithResponse(ctx context.Context, params *BlurSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurSyncPostResponse, error) {
	rsp, err := c.BlurSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurSyncPostResponse(rsp)
}

// BlurhashAsyncGetWithResponse request returning *BlurhashAsyncGetResponse
func (c *ClientWithResponses) BlurhashAsyncGetWithResponse(ctx context.Context, params *BlurhashAsyncGetParams, reqEditors ...RequestEditorFn) (*BlurhashAsyncGetResponse, error) {
	rsp, err := c.BlurhashAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurhashAsyncGetResponse(rsp)
}

// BlurhashAsyncPostWithBodyWithResponse request with arbitrary body returning *BlurhashAsyncPostResponse
func (c *ClientWithResponses) BlurhashAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurhashAsyncPostResponse, error) {
	rsp, err := c.BlurhashAsyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurhashAsyncPostResponse(rsp)
}

// BlurhashSyncGetWithResponse request returning *BlurhashSyncGetResponse
func (c *ClientWithResponses) BlurhashSyncGetWithResponse(ctx context.Context, params *BlurhashSyncGetParams, reqEditors ...RequestEditorFn) (*BlurhashSyncGetResponse, error) {
	rsp, err := c.BlurhashSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurhashSyncGetResponse(rsp)
}

// BlurhashSyncPostWithBodyWithResponse request with arbitrary body returning *BlurhashSyncPostResponse
func (c *ClientWithResponses) BlurhashSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurhashSyncPostResponse, error) {
	rsp, err := c.BlurhashSyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurhashSyncPostResponse(rsp)
}

// BlurpartialAsyncGetWithResponse request returning *BlurpartialAsyncGetResponse
func (c *ClientWithResponses) BlurpartialAsyncGetWithResponse(ctx context.Context, params *BlurpartialAsyncGetParams, reqEditors ...RequestEditorFn) (*BlurpartialAsyncGetResponse, error) {
	rsp, err := c.BlurpartialAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurpartialAsyncGetResponse(rsp)
}

// BlurpartialAsyncPostWithBodyWithResponse request with arbitrary body returning *BlurpartialAsyncPostResponse
func (c *ClientWithResponses) BlurpartialAsyncPostWithBodyWithResponse(ctx context.Context, params *BlurpartialAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurpartialAsyncPostResponse, error) {
	rsp, err := c.BlurpartialAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurpartialAsyncPostResponse(rsp)
}

// BlurpartialSyncGetWithResponse request returning *BlurpartialSyncGetResponse
func (c *ClientWithResponses) BlurpartialSyncGetWithResponse(ctx context.Context, params *BlurpartialSyncGetParams, reqEditors ...RequestEditorFn) (*BlurpartialSyncGetResponse, error) {
	rsp, err := c.BlurpartialSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurpartialSyncGetResponse(rsp)
}

// BlurpartialSyncPostWithBodyWithResponse request with arbitrary body returning *BlurpartialSyncPostResponse
func (c *ClientWithResponses) BlurpartialSyncPostWithBodyWithResponse(ctx context.Context, params *BlurpartialSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BlurpartialSyncPostResponse, error) {
	rsp, err := c.BlurpartialSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBlurpartialSyncPostResponse(rsp)
}

// BrightnessAsyncGetWithResponse request returning *BrightnessAsyncGetResponse
func (c *ClientWithResponses) BrightnessAsyncGetWithResponse(ctx context.Context, params *BrightnessAsyncGetParams, reqEditors ...RequestEditorFn) (*BrightnessAsyncGetResponse, error) {
	rsp, err := c.BrightnessAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBrightnessAsyncGetResponse(rsp)
}

// BrightnessAsyncPostWithBodyWithResponse request with arbitrary body returning *BrightnessAsyncPostResponse
func (c *ClientWithResponses) BrightnessAsyncPostWithBodyWithResponse(ctx context.Context, params *BrightnessAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BrightnessAsyncPostResponse, error) {
	rsp, err := c.BrightnessAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBrightnessAsyncPostResponse(rsp)
}

// BrightnessSyncGetWithResponse request returning *BrightnessSyncGetResponse
func (c *ClientWithResponses) BrightnessSyncGetWithResponse(ctx context.Context, params *BrightnessSyncGetParams, reqEditors ...RequestEditorFn) (*BrightnessSyncGetResponse, error) {
	rsp, err := c.BrightnessSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBrightnessSyncGetResponse(rsp)
}

// BrightnessSyncPostWithBodyWithResponse request with arbitrary body returning *BrightnessSyncPostResponse
func (c *ClientWithResponses) BrightnessSyncPostWithBodyWithResponse(ctx context.Context, params *BrightnessSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BrightnessSyncPostResponse, error) {
	rsp, err := c.BrightnessSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBrightnessSyncPostResponse(rsp)
}

// CompressAsyncGetWithResponse request returning *CompressAsyncGetResponse
func (c *ClientWithResponses) CompressAsyncGetWithResponse(ctx context.Context, params *CompressAsyncGetParams, reqEditors ...RequestEditorFn) (*CompressAsyncGetResponse, error) {
	rsp, err := c.CompressAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressAsyncGetResponse(rsp)
}

// CompressAsyncPostWithBodyWithResponse request with arbitrary body returning *CompressAsyncPostResponse
func (c *ClientWithResponses) CompressAsyncPostWithBodyWithResponse(ctx context.Context, params *CompressAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressAsyncPostResponse, error) {
	rsp, err := c.CompressAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressAsyncPostResponse(rsp)
}

// CompressSyncGetWithResponse request returning *CompressSyncGetResponse
func (c *ClientWithResponses) CompressSyncGetWithResponse(ctx context.Context, params *CompressSyncGetParams, reqEditors ...RequestEditorFn) (*CompressSyncGetResponse, error) {
	rsp, err := c.CompressSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressSyncGetResponse(rsp)
}

// CompressSyncPostWithBodyWithResponse request with arbitrary body returning *CompressSyncPostResponse
func (c *ClientWithResponses) CompressSyncPostWithBodyWithResponse(ctx context.Context, params *CompressSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressSyncPostResponse, error) {
	rsp, err := c.CompressSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressSyncPostResponse(rsp)
}

// ConcatAsyncPostWithBodyWithResponse request with arbitrary body returning *ConcatAsyncPostResponse
func (c *ClientWithResponses) ConcatAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConcatAsyncPostResponse, error) {
	rsp, err := c.ConcatAsyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConcatAsyncPostResponse(rsp)
}

func (c *ClientWithResponses) ConcatAsyncPostWithResponse(ctx context.Context, body ConcatAsyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ConcatAsyncPostResponse, error) {
	rsp, err := c.ConcatAsyncPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConcatAsyncPostResponse(rsp)
}

// ConcatSyncPostWithBodyWithResponse request with arbitrary body returning *ConcatSyncPostResponse
func (c *ClientWithResponses) ConcatSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConcatSyncPostResponse, error) {
	rsp, err := c.ConcatSyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConcatSyncPostResponse(rsp)
}

func (c *ClientWithResponses) ConcatSyncPostWithResponse(ctx context.Context, body ConcatSyncPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ConcatSyncPostResponse, error) {
	rsp, err := c.ConcatSyncPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConcatSyncPostResponse(rsp)
}

// ContrastAsyncGetWithResponse request returning *ContrastAsyncGetResponse
func (c *ClientWithResponses) ContrastAsyncGetWithResponse(ctx context.Context, params *ContrastAsyncGetParams, reqEditors ...RequestEditorFn) (*ContrastAsyncGetResponse, error) {
	rsp, err := c.ContrastAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContrastAsyncGetResponse(rsp)
}

// ContrastAsyncPostWithBodyWithResponse request with arbitrary body returning *ContrastAsyncPostResponse
func (c *ClientWithResponses) ContrastAsyncPostWithBodyWithResponse(ctx context.Context, params *ContrastAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContrastAsyncPostResponse, error) {
	rsp, err := c.ContrastAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContrastAsyncPostResponse(rsp)
}

// ContrastSyncGetWithResponse request returning *ContrastSyncGetResponse
func (c *ClientWithResponses) ContrastSyncGetWithResponse(ctx context.Context, params *ContrastSyncGetParams, reqEditors ...RequestEditorFn) (*ContrastSyncGetResponse, error) {
	rsp, err := c.ContrastSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContrastSyncGetResponse(rsp)
}

// ContrastSyncPostWithBodyWithResponse request with arbitrary body returning *ContrastSyncPostResponse
func (c *ClientWithResponses) ContrastSyncPostWithBodyWithResponse(ctx context.Context, params *ContrastSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContrastSyncPostResponse, error) {
	rsp, err := c.ContrastSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContrastSyncPostResponse(rsp)
}

// ConvertAsyncGetWithResponse request returning *ConvertAsyncGetResponse
func (c *ClientWithResponses) ConvertAsyncGetWithResponse(ctx context.Context, params *ConvertAsyncGetParams, reqEditors ...RequestEditorFn) (*ConvertAsyncGetResponse, error) {
	rsp, err := c.ConvertAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertAsyncGetResponse(rsp)
}

// ConvertAsyncPostWithBodyWithResponse request with arbitrary body returning *ConvertAsyncPostResponse
func (c *ClientWithResponses) ConvertAsyncPostWithBodyWithResponse(ctx context.Context, params *ConvertAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertAsyncPostResponse, error) {
	rsp, err := c.ConvertAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertAsyncPostResponse(rsp)
}

// ConvertSyncGetWithResponse request returning *ConvertSyncGetResponse
func (c *ClientWithResponses) ConvertSyncGetWithResponse(ctx context.Context, params *ConvertSyncGetParams, reqEditors ...RequestEditorFn) (*ConvertSyncGetResponse, error) {
	rsp, err := c.ConvertSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertSyncGetResponse(rsp)
}

// ConvertSyncPostWithBodyWithResponse request with arbitrary body returning *ConvertSyncPostResponse
func (c *ClientWithResponses) ConvertSyncPostWithBodyWithResponse(ctx context.Context, params *ConvertSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertSyncPostResponse, error) {
	rsp, err := c.ConvertSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertSyncPostResponse(rsp)
}

// CropAsyncGetWithResponse request returning *CropAsyncGetResponse
func (c *ClientWithResponses) CropAsyncGetWithResponse(ctx context.Context, params *CropAsyncGetParams, reqEditors ...RequestEditorFn) (*CropAsyncGetResponse, error) {
	rsp, err := c.CropAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCropAsyncGetResponse(rsp)
}

// CropAsyncPostWithBodyWithResponse request with arbitrary body returning *CropAsyncPostResponse
func (c *ClientWithResponses) CropAsyncPostWithBodyWithResponse(ctx context.Context, params *CropAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CropAsyncPostResponse, error) {
	rsp, err := c.CropAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCropAsyncPostResponse(rsp)
}

// CropSyncGetWithResponse request returning *CropSyncGetResponse
func (c *ClientWithResponses) CropSyncGetWithResponse(ctx context.Context, params *CropSyncGetParams, reqEditors ...RequestEditorFn) (*CropSyncGetResponse, error) {
	rsp, err := c.CropSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCropSyncGetResponse(rsp)
}

// CropSyncPostWithBodyWithResponse request with arbitrary body returning *CropSyncPostResponse
func (c *ClientWithResponses) CropSyncPostWithBodyWithResponse(ctx context.Context, params *CropSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CropSyncPostResponse, error) {
	rsp, err := c.CropSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCropSyncPostResponse(rsp)
}

// EqualizeAsyncGetWithResponse request returning *EqualizeAsyncGetResponse
func (c *ClientWithResponses) EqualizeAsyncGetWithResponse(ctx context.Context, params *EqualizeAsyncGetParams, reqEditors ...RequestEditorFn) (*EqualizeAsyncGetResponse, error) {
	rsp, err := c.EqualizeAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEqualizeAsyncGetResponse(rsp)
}

// EqualizeAsyncPostWithBodyWithResponse request with arbitrary body returning *EqualizeAsyncPostResponse
func (c *ClientWithResponses) EqualizeAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EqualizeAsyncPostResponse, error) {
	rsp, err := c.EqualizeAsyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEqualizeAsyncPostResponse(rsp)
}

// EqualizeSyncGetWithResponse request returning *EqualizeSyncGetResponse
func (c *ClientWithResponses) EqualizeSyncGetWithResponse(ctx context.Context, params *EqualizeSyncGetParams, reqEditors ...RequestEditorFn) (*EqualizeSyncGetResponse, error) {
	rsp, err := c.EqualizeSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEqualizeSyncGetResponse(rsp)
}

// EqualizeSyncPostWithBodyWithResponse request with arbitrary body returning *EqualizeSyncPostResponse
func (c *ClientWithResponses) EqualizeSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EqualizeSyncPostResponse, error) {
	rsp, err := c.EqualizeSyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEqualizeSyncPostResponse(rsp)
}

// GrayscaleAsyncGetWithResponse request returning *GrayscaleAsyncGetResponse
func (c *ClientWithResponses) GrayscaleAsyncGetWithResponse(ctx context.Context, params *GrayscaleAsyncGetParams, reqEditors ...RequestEditorFn) (*GrayscaleAsyncGetResponse, error) {
	rsp, err := c.GrayscaleAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGrayscaleAsyncGetResponse(rsp)
}

// GrayscaleAsyncPostWithBodyWithResponse request with arbitrary body returning *GrayscaleAsyncPostResponse
func (c *ClientWithResponses) GrayscaleAsyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GrayscaleAsyncPostResponse, error) {
	rsp, err := c.GrayscaleAsyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGrayscaleAsyncPostResponse(rsp)
}

// GrayscaleSyncGetWithResponse request returning *GrayscaleSyncGetResponse
func (c *ClientWithResponses) GrayscaleSyncGetWithResponse(ctx context.Context, params *GrayscaleSyncGetParams, reqEditors ...RequestEditorFn) (*GrayscaleSyncGetResponse, error) {
	rsp, err := c.GrayscaleSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGrayscaleSyncGetResponse(rsp)
}

// GrayscaleSyncPostWithBodyWithResponse request with arbitrary body returning *GrayscaleSyncPostResponse
func (c *ClientWithResponses) GrayscaleSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GrayscaleSyncPostResponse, error) {
	rsp, err := c.GrayscaleSyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGrayscaleSyncPostResponse(rsp)
}

// ImageinfoSyncGetWithResponse request returning *ImageinfoSyncGetResponse
func (c *ClientWithResponses) ImageinfoSyncGetWithResponse(ctx context.Context, params *ImageinfoSyncGetParams, reqEditors ...RequestEditorFn) (*ImageinfoSyncGetResponse, error) {
	rsp, err := c.ImageinfoSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImageinfoSyncGetResponse(rsp)
}

// ImageinfoSyncPostWithBodyWithResponse request with arbitrary body returning *ImageinfoSyncPostResponse
func (c *ClientWithResponses) ImageinfoSyncPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImageinfoSyncPostResponse, error) {
	rsp, err := c.ImageinfoSyncPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImageinfoSyncPostResponse(rsp)
}

// PipelineGetStatusWithResponse request returning *PipelineGetStatusResponse
func (c *ClientWithResponses) PipelineGetStatusWithResponse(ctx context.Context, executionId string, reqEditors ...RequestEditorFn) (*PipelineGetStatusResponse, error) {
	rsp, err := c.PipelineGetStatus(ctx, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelineGetStatusResponse(rsp)
}

// PipelineGetWithResponse request returning *PipelineGetResponse
func (c *ClientWithResponses) PipelineGetWithResponse(ctx context.Context, name string, params *PipelineGetParams, reqEditors ...RequestEditorFn) (*PipelineGetResponse, error) {
	rsp, err := c.PipelineGet(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelineGetResponse(rsp)
}

// PipelinePostWithBodyWithResponse request with arbitrary body returning *PipelinePostResponse
func (c *ClientWithResponses) PipelinePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PipelinePostResponse, error) {
	rsp, err := c.PipelinePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelinePostResponse(rsp)
}

// ResizeAsyncGetWithResponse request returning *ResizeAsyncGetResponse
func (c *ClientWithResponses) ResizeAsyncGetWithResponse(ctx context.Context, params *ResizeAsyncGetParams, reqEditors ...RequestEditorFn) (*ResizeAsyncGetResponse, error) {
	rsp, err := c.ResizeAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeAsyncGetResponse(rsp)
}

// ResizeAsyncPostWithBodyWithResponse request with arbitrary body returning *ResizeAsyncPostResponse
func (c *ClientWithResponses) ResizeAsyncPostWithBodyWithResponse(ctx context.Context, params *ResizeAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeAsyncPostResponse, error) {
	rsp, err := c.ResizeAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeAsyncPostResponse(rsp)
}

// ResizeSyncGetWithResponse request returning *ResizeSyncGetResponse
func (c *ClientWithResponses) ResizeSyncGetWithResponse(ctx context.Context, params *ResizeSyncGetParams, reqEditors ...RequestEditorFn) (*ResizeSyncGetResponse, error) {
	rsp, err := c.ResizeSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeSyncGetResponse(rsp)
}

// ResizeSyncPostWithBodyWithResponse request with arbitrary body returning *ResizeSyncPostResponse
func (c *ClientWithResponses) ResizeSyncPostWithBodyWithResponse(ctx context.Context, params *ResizeSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeSyncPostResponse, error) {
	rsp, err := c.ResizeSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeSyncPostResponse(rsp)
}

// RotateAsyncGetWithResponse request returning *RotateAsyncGetResponse
func (c *ClientWithResponses) RotateAsyncGetWithResponse(ctx context.Context, params *RotateAsyncGetParams, reqEditors ...RequestEditorFn) (*RotateAsyncGetResponse, error) {
	rsp, err := c.RotateAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateAsyncGetResponse(rsp)
}

// RotateAsyncPostWithBodyWithResponse request with arbitrary body returning *RotateAsyncPostResponse
func (c *ClientWithResponses) RotateAsyncPostWithBodyWithResponse(ctx context.Context, params *RotateAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateAsyncPostResponse, error) {
	rsp, err := c.RotateAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateAsyncPostResponse(rsp)
}

// RotateSyncGetWithResponse request returning *RotateSyncGetResponse
func (c *ClientWithResponses) RotateSyncGetWithResponse(ctx context.Context, params *RotateSyncGetParams, reqEditors ...RequestEditorFn) (*RotateSyncGetResponse, error) {
	rsp, err := c.RotateSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateSyncGetResponse(rsp)
}

// RotateSyncPostWithBodyWithResponse request with arbitrary body returning *RotateSyncPostResponse
func (c *ClientWithResponses) RotateSyncPostWithBodyWithResponse(ctx context.Context, params *RotateSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateSyncPostResponse, error) {
	rsp, err := c.RotateSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateSyncPostResponse(rsp)
}

// TextAsyncGetWithResponse request returning *TextAsyncGetResponse
func (c *ClientWithResponses) TextAsyncGetWithResponse(ctx context.Context, params *TextAsyncGetParams, reqEditors ...RequestEditorFn) (*TextAsyncGetResponse, error) {
	rsp, err := c.TextAsyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextAsyncGetResponse(rsp)
}

// TextAsyncPostWithBodyWithResponse request with arbitrary body returning *TextAsyncPostResponse
func (c *ClientWithResponses) TextAsyncPostWithBodyWithResponse(ctx context.Context, params *TextAsyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextAsyncPostResponse, error) {
	rsp, err := c.TextAsyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextAsyncPostResponse(rsp)
}

// TextSyncGetWithResponse request returning *TextSyncGetResponse
func (c *ClientWithResponses) TextSyncGetWithResponse(ctx context.Context, params *TextSyncGetParams, reqEditors ...RequestEditorFn) (*TextSyncGetResponse, error) {
	rsp, err := c.TextSyncGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextSyncGetResponse(rsp)
}

// TextSyncPostWithBodyWithResponse request with arbitrary body returning *TextSyncPostResponse
func (c *ClientWithResponses) TextSyncPostWithBodyWithResponse(ctx context.Context, params *TextSyncPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TextSyncPostResponse, error) {
	rsp, err := c.TextSyncPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTextSyncPostResponse(rsp)
}

// ParseBlendAsyncPostResponse parses an HTTP response from a BlendAsyncPostWithResponse call
func ParseBlendAsyncPostResponse(rsp *http.Response) (*BlendAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlendAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlendSyncPostResponse parses an HTTP response from a BlendSyncPostWithResponse call
func ParseBlendSyncPostResponse(rsp *http.Response) (*BlendSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlendSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurAsyncGetResponse parses an HTTP response from a BlurAsyncGetWithResponse call
func ParseBlurAsyncGetResponse(rsp *http.Response) (*BlurAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurAsyncPostResponse parses an HTTP response from a BlurAsyncPostWithResponse call
func ParseBlurAsyncPostResponse(rsp *http.Response) (*BlurAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurSyncGetResponse parses an HTTP response from a BlurSyncGetWithResponse call
func ParseBlurSyncGetResponse(rsp *http.Response) (*BlurSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurSyncPostResponse parses an HTTP response from a BlurSyncPostWithResponse call
func ParseBlurSyncPostResponse(rsp *http.Response) (*BlurSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurhashAsyncGetResponse parses an HTTP response from a BlurhashAsyncGetWithResponse call
func ParseBlurhashAsyncGetResponse(rsp *http.Response) (*BlurhashAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurhashAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurhashAsyncPostResponse parses an HTTP response from a BlurhashAsyncPostWithResponse call
func ParseBlurhashAsyncPostResponse(rsp *http.Response) (*BlurhashAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurhashAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurhashSyncGetResponse parses an HTTP response from a BlurhashSyncGetWithResponse call
func ParseBlurhashSyncGetResponse(rsp *http.Response) (*BlurhashSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurhashSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurhashSyncPostResponse parses an HTTP response from a BlurhashSyncPostWithResponse call
func ParseBlurhashSyncPostResponse(rsp *http.Response) (*BlurhashSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurhashSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurpartialAsyncGetResponse parses an HTTP response from a BlurpartialAsyncGetWithResponse call
func ParseBlurpartialAsyncGetResponse(rsp *http.Response) (*BlurpartialAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurpartialAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurpartialAsyncPostResponse parses an HTTP response from a BlurpartialAsyncPostWithResponse call
func ParseBlurpartialAsyncPostResponse(rsp *http.Response) (*BlurpartialAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurpartialAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurpartialSyncGetResponse parses an HTTP response from a BlurpartialSyncGetWithResponse call
func ParseBlurpartialSyncGetResponse(rsp *http.Response) (*BlurpartialSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurpartialSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBlurpartialSyncPostResponse parses an HTTP response from a BlurpartialSyncPostWithResponse call
func ParseBlurpartialSyncPostResponse(rsp *http.Response) (*BlurpartialSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BlurpartialSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBrightnessAsyncGetResponse parses an HTTP response from a BrightnessAsyncGetWithResponse call
func ParseBrightnessAsyncGetResponse(rsp *http.Response) (*BrightnessAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BrightnessAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBrightnessAsyncPostResponse parses an HTTP response from a BrightnessAsyncPostWithResponse call
func ParseBrightnessAsyncPostResponse(rsp *http.Response) (*BrightnessAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BrightnessAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBrightnessSyncGetResponse parses an HTTP response from a BrightnessSyncGetWithResponse call
func ParseBrightnessSyncGetResponse(rsp *http.Response) (*BrightnessSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BrightnessSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBrightnessSyncPostResponse parses an HTTP response from a BrightnessSyncPostWithResponse call
func ParseBrightnessSyncPostResponse(rsp *http.Response) (*BrightnessSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BrightnessSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCompressAsyncGetResponse parses an HTTP response from a CompressAsyncGetWithResponse call
func ParseCompressAsyncGetResponse(rsp *http.Response) (*CompressAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompressAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCompressAsyncPostResponse parses an HTTP response from a CompressAsyncPostWithResponse call
func ParseCompressAsyncPostResponse(rsp *http.Response) (*CompressAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompressAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCompressSyncGetResponse parses an HTTP response from a CompressSyncGetWithResponse call
func ParseCompressSyncGetResponse(rsp *http.Response) (*CompressSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompressSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCompressSyncPostResponse parses an HTTP response from a CompressSyncPostWithResponse call
func ParseCompressSyncPostResponse(rsp *http.Response) (*CompressSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompressSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConcatAsyncPostResponse parses an HTTP response from a ConcatAsyncPostWithResponse call
func ParseConcatAsyncPostResponse(rsp *http.Response) (*ConcatAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConcatAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConcatSyncPostResponse parses an HTTP response from a ConcatSyncPostWithResponse call
func ParseConcatSyncPostResponse(rsp *http.Response) (*ConcatSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConcatSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseContrastAsyncGetResponse parses an HTTP response from a ContrastAsyncGetWithResponse call
func ParseContrastAsyncGetResponse(rsp *http.Response) (*ContrastAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContrastAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseContrastAsyncPostResponse parses an HTTP response from a ContrastAsyncPostWithResponse call
func ParseContrastAsyncPostResponse(rsp *http.Response) (*ContrastAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContrastAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseContrastSyncGetResponse parses an HTTP response from a ContrastSyncGetWithResponse call
func ParseContrastSyncGetResponse(rsp *http.Response) (*ContrastSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContrastSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseContrastSyncPostResponse parses an HTTP response from a ContrastSyncPostWithResponse call
func ParseContrastSyncPostResponse(rsp *http.Response) (*ContrastSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContrastSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConvertAsyncGetResponse parses an HTTP response from a ConvertAsyncGetWithResponse call
func ParseConvertAsyncGetResponse(rsp *http.Response) (*ConvertAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConvertAsyncPostResponse parses an HTTP response from a ConvertAsyncPostWithResponse call
func ParseConvertAsyncPostResponse(rsp *http.Response) (*ConvertAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConvertSyncGetResponse parses an HTTP response from a ConvertSyncGetWithResponse call
func ParseConvertSyncGetResponse(rsp *http.Response) (*ConvertSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseConvertSyncPostResponse parses an HTTP response from a ConvertSyncPostWithResponse call
func ParseConvertSyncPostResponse(rsp *http.Response) (*ConvertSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCropAsyncGetResponse parses an HTTP response from a CropAsyncGetWithResponse call
func ParseCropAsyncGetResponse(rsp *http.Response) (*CropAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CropAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCropAsyncPostResponse parses an HTTP response from a CropAsyncPostWithResponse call
func ParseCropAsyncPostResponse(rsp *http.Response) (*CropAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CropAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCropSyncGetResponse parses an HTTP response from a CropSyncGetWithResponse call
func ParseCropSyncGetResponse(rsp *http.Response) (*CropSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CropSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCropSyncPostResponse parses an HTTP response from a CropSyncPostWithResponse call
func ParseCropSyncPostResponse(rsp *http.Response) (*CropSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CropSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseEqualizeAsyncGetResponse parses an HTTP response from a EqualizeAsyncGetWithResponse call
func ParseEqualizeAsyncGetResponse(rsp *http.Response) (*EqualizeAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EqualizeAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseEqualizeAsyncPostResponse parses an HTTP response from a EqualizeAsyncPostWithResponse call
func ParseEqualizeAsyncPostResponse(rsp *http.Response) (*EqualizeAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EqualizeAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseEqualizeSyncGetResponse parses an HTTP response from a EqualizeSyncGetWithResponse call
func ParseEqualizeSyncGetResponse(rsp *http.Response) (*EqualizeSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EqualizeSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseEqualizeSyncPostResponse parses an HTTP response from a EqualizeSyncPostWithResponse call
func ParseEqualizeSyncPostResponse(rsp *http.Response) (*EqualizeSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EqualizeSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGrayscaleAsyncGetResponse parses an HTTP response from a GrayscaleAsyncGetWithResponse call
func ParseGrayscaleAsyncGetResponse(rsp *http.Response) (*GrayscaleAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GrayscaleAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGrayscaleAsyncPostResponse parses an HTTP response from a GrayscaleAsyncPostWithResponse call
func ParseGrayscaleAsyncPostResponse(rsp *http.Response) (*GrayscaleAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GrayscaleAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGrayscaleSyncGetResponse parses an HTTP response from a GrayscaleSyncGetWithResponse call
func ParseGrayscaleSyncGetResponse(rsp *http.Response) (*GrayscaleSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GrayscaleSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGrayscaleSyncPostResponse parses an HTTP response from a GrayscaleSyncPostWithResponse call
func ParseGrayscaleSyncPostResponse(rsp *http.Response) (*GrayscaleSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GrayscaleSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseImageinfoSyncGetResponse parses an HTTP response from a ImageinfoSyncGetWithResponse call
func ParseImageinfoSyncGetResponse(rsp *http.Response) (*ImageinfoSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImageinfoSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseImageinfoSyncPostResponse parses an HTTP response from a ImageinfoSyncPostWithResponse call
func ParseImageinfoSyncPostResponse(rsp *http.Response) (*ImageinfoSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImageinfoSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePipelineGetStatusResponse parses an HTTP response from a PipelineGetStatusWithResponse call
func ParsePipelineGetStatusResponse(rsp *http.Response) (*PipelineGetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelineGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineExecutionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePipelineGetResponse parses an HTTP response from a PipelineGetWithResponse call
func ParsePipelineGetResponse(rsp *http.Response) (*PipelineGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelineGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePipelinePostResponse parses an HTTP response from a PipelinePostWithResponse call
func ParsePipelinePostResponse(rsp *http.Response) (*PipelinePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelinePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseResizeAsyncGetResponse parses an HTTP response from a ResizeAsyncGetWithResponse call
func ParseResizeAsyncGetResponse(rsp *http.Response) (*ResizeAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResizeAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResizeAsyncPostResponse parses an HTTP response from a ResizeAsyncPostWithResponse call
func ParseResizeAsyncPostResponse(rsp *http.Response) (*ResizeAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResizeAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResizeSyncGetResponse parses an HTTP response from a ResizeSyncGetWithResponse call
func ParseResizeSyncGetResponse(rsp *http.Response) (*ResizeSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResizeSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResizeSyncPostResponse parses an HTTP response from a ResizeSyncPostWithResponse call
func ParseResizeSyncPostResponse(rsp *http.Response) (*ResizeSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResizeSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRotateAsyncGetResponse parses an HTTP response from a RotateAsyncGetWithResponse call
func ParseRotateAsyncGetResponse(rsp *http.Response) (*RotateAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRotateAsyncPostResponse parses an HTTP response from a RotateAsyncPostWithResponse call
func ParseRotateAsyncPostResponse(rsp *http.Response) (*RotateAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRotateSyncGetResponse parses an HTTP response from a RotateSyncGetWithResponse call
func ParseRotateSyncGetResponse(rsp *http.Response) (*RotateSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRotateSyncPostResponse parses an HTTP response from a RotateSyncPostWithResponse call
func ParseRotateSyncPostResponse(rsp *http.Response) (*RotateSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTextAsyncGetResponse parses an HTTP response from a TextAsyncGetWithResponse call
func ParseTextAsyncGetResponse(rsp *http.Response) (*TextAsyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextAsyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTextAsyncPostResponse parses an HTTP response from a TextAsyncPostWithResponse call
func ParseTextAsyncPostResponse(rsp *http.Response) (*TextAsyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextAsyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTextSyncGetResponse parses an HTTP response from a TextSyncGetWithResponse call
func ParseTextSyncGetResponse(rsp *http.Response) (*TextSyncGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextSyncGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTextSyncPostResponse parses an HTTP response from a TextSyncPostWithResponse call
func ParseTextSyncPostResponse(rsp *http.Response) (*TextSyncPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TextSyncPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
